unit Un_stud;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, Grids, DBGrids, ExtCtrls, ADODB,DB, DBCtrls;


type
  TFrm_stud = class(TForm)
    StudPage: TPageControl;
    SelTab: TTabSheet;
    InsTab: TTabSheet;
    UpdTab: TTabSheet;
    delTab: TTabSheet;
    StudgroupBox: TGroupBox;
    StudpbtnBox: TGroupBox;
    StudDataBox: TGroupBox;
    StudSelGrid: TDBGrid;
    StudSelBtn: TButton;
    StudCondBox: TGroupBox;
    Stud_condEdit: TLabeledEdit;
    Stud_fnd_edit: TLabeledEdit;
    Stud_sp_groupradio: TRadioButton;
    StudResetRadio: TRadioButton;
    Grupp_inpBox: TGroupBox;
    Grupp_naim_g_inp: TLabeledEdit;
    Grupp_ins_btn_Box: TGroupBox;
    Grupp_insBtn: TButton;
    Grupp_DataInsBox: TGroupBox;
    Grupp_upd_inp_Box: TGroupBox;
    Grupplbl: TStaticText;
    GruppUpdDBL: TDBLookupComboBox;
    Grupp_upd_btn_Box: TGroupBox;
    Grupp_upd_Btn: TButton;
    Grupp_upd_dataBox: TGroupBox;
    delgrdatacBox: TGroupBox;
    delgrlbl: TStaticText;
    delgrDBL: TDBLookupComboBox;
    dlgrbtnBox: TGroupBox;
    delgrBtn: TButton;
    degrdataBox: TGroupBox;
    Stud_gr_groupradio: TRadioButton;
    Studfnd_naimCb: TCheckBox;
    Grupp_insGrd: TDBGrid;
    GradeUpDown: TUpDown;
    GradeEdit: TEdit;
    gradelbl: TStaticText;
    SpecGrinsDBL: TDBLookupComboBox;
    SpecGinsLbl: TLabel;
    GruppupdDataGrd: TDBGrid;
    UpDown_upd_grade: TUpDown;
    gr_upd_grader: TEdit;
    grupdLbl: TLabel;
    TimePanel: TLabel;
    delgrgrid: TDBGrid;
    CbSecondnaim: TCheckBox;
    procedure CbSecondnaimClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_stud: TFrm_stud;

implementation

uses Un_dm, Un_main,Un_func;

{$R *.dfm}



procedure TFrm_stud.CbSecondnaimClick(Sender: TObject);
var
 InputString, p1, p2, p3: string;
begin
case  CbSecondnaim.Checked of
true:
begin
  Stud_condEdit.Hint:='Примнр Поиска по  ФИО:'+#10#13+'Рахмон Эмоммалм';
  InputString := Stud_condEdit.Text;
  InputString := Stud_condEdit.Text;
  if NormalizeStringAndExtractParams2(InputString, p1, p2) then
  begin

    Stud_condEdit.Text := InputString;
//ShowMessage('Первое слово: ' + p1);
  //ShowMessage('Второе слово: ' + p2);

  end
  else
  begin

    Stud_condEdit.Clear;
  end;

  end;
false:
begin
    Stud_condEdit.Hint:='Примнр Поиска по  ФИО:'+#10#13+'Сухов Федор Иванович';
  InputString := Stud_condEdit.Text;
  if NormalizeStringAndExtractParams3(InputString, p1, p2, p3) then
  begin
    // Обновляем текст в Stud_condEdit
    Stud_condEdit.Text := InputString;

    // Выводим результаты
    ShowMessage('Первое слово: ' + p1);
    ShowMessage('Второе слово: ' + p2);
    ShowMessage('Третье слово: ' + p3);
  end
  else
  begin
    // Если обработка не удалась, очищаем поле
    Stud_condEdit.Clear;
  end;
end;
end;
end;
procedure TFrm_stud.FormActivate(Sender: TObject);
begin
  dm.GruppQuery.Open;
  dm.specQuery.Open;
  dm.StudQuery.Open;
end;

procedure TFrm_stud.FormClose(Sender: TObject; var Action: TCloseAction);
  var q:Integer;
begin
CbSecondnaim.Checked:=False;
  stud_condEdit.EditLabel.Caption:='Точное совпадение по условию';
  SaveFormState(Self);
 with dm do
 begin
    for q := 0 to ComponentCount - 1 do
 begin
    if(Components[q] is TADOQuery)  then
   begin
      (Components[q] as TADOQuery).Close;
 end;
 end;
 end;
end;

procedure TFrm_stud.FormCreate(Sender: TObject);
begin
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  LoadFormState(Self);
  CbSecondnaim.Checked:=False;
  Stud_condEdit.Hint:='';
end;

end.
