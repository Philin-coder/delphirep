unit Un_grupp;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, Grids, DBGrids, ExtCtrls, ADODB,DB, DBCtrls;

type
  TFrm_grupp = class(TForm)
    grupPage: TPageControl;
    SelTab: TTabSheet;
    InsTab: TTabSheet;
    UpdTab: TTabSheet;
    delTab: TTabSheet;
    gruppgroupBox: TGroupBox;
    gruppbtnBox: TGroupBox;
    gruppDataBox: TGroupBox;
    gruppSelGrid: TDBGrid;
    gruppSelBtn: TButton;
    gruppCondBox: TGroupBox;
    grupp_condEdit: TLabeledEdit;
    grupp_fnd_edit: TLabeledEdit;
    grupp_sp_groupradio: TRadioButton;
    gruppResetRadio: TRadioButton;
    Grupp_inpBox: TGroupBox;
    Grupp_naim_g_inp: TLabeledEdit;
    Grupp_ins_btn_Box: TGroupBox;
    Grupp_insBtn: TButton;
    Grupp_DataInsBox: TGroupBox;
    Spec_upd_inp_Box: TGroupBox;
    spec_upd_spec_inp: TLabeledEdit;
    Speclbl: TStaticText;
    SpecUpdDBL: TDBLookupComboBox;
    Grupp_upd_btn_Box: TGroupBox;
    Spec_upd_Btn: TButton;
    Spec_upd_dataBox: TGroupBox;
    SpecUpddataGrd: TDBGrid;
    delspedatacBox: TGroupBox;
    delspeclbl: TStaticText;
    delSpecDBL: TDBLookupComboBox;
    dlspecbtnBox: TGroupBox;
    delspecBtn: TButton;
    delspecdataBox: TGroupBox;
    delspecGrd: TDBGrid;
    grupp_gr_groupradio: TRadioButton;
    fnd_naimCb: TCheckBox;
    Grupp_insGrd: TDBGrid;
    GradeUpDown: TUpDown;
    GradeEdit: TEdit;
    gradelbl: TStaticText;
    SpecGrinsDBL: TDBLookupComboBox;
    SpecGinsLbl: TLabel;
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure gruppSelBtnClick(Sender: TObject);
    procedure gruppResetRadioClick(Sender: TObject);
    procedure grupp_sp_groupradioClick(Sender: TObject);
    procedure grupp_gr_groupradioClick(Sender: TObject);
    procedure grupp_fnd_editKeyPress(Sender: TObject; var Key: Char);
    procedure fnd_naimCbClick(Sender: TObject);
    procedure grupp_condEditKeyPress(Sender: TObject; var Key: Char);
    procedure Grupp_insBtnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_grupp: TFrm_grupp;

implementation

uses Un_dm, Un_main, Un_func;

{$R *.dfm}

procedure TFrm_grupp.fnd_naimCbClick(Sender: TObject);
begin
if fnd_naimCb.Checked then
begin
  Grupp_condEdit.EditLabel.Caption:='Живой поиск по названию';
end
else
begin
  Grupp_condEdit.EditLabel.Caption:='Точное совпадение условию';
 try
  with dm.GruppQuery  do
    begin
    close;
    SQL.Text:='SELECT'+' '+
   'gruppa.grup_id,  gruppa.naim_grup, gruppa.kurs,spec.spec_maim'+' '+
      'from gruppa'+' '+
      'inner join spec on  spec.spec_id=gruppa.spec_id'+' '+
      'where 1=1';
    open;
    end;
except
begin
    ShowMessage('Wrong situation');
end;
end;


end;

end;

procedure TFrm_grupp.FormActivate(Sender: TObject);
begin
  dm.GruppQuery.Open;
  dm.specQuery.Open;
end;

procedure TFrm_grupp.FormClose(Sender: TObject; var Action: TCloseAction);
var
  q:Integer;
begin
  fnd_naimCb.Enabled:=True;
  Grupp_condEdit.EditLabel.Caption:='Точное совпадение условию';
  SaveFormState(Self);
 with dm do
 begin
    for q := 0 to ComponentCount - 1 do
 begin
    if(Components[q] is TADOQuery)  then
   begin
      (Components[q] as TADOQuery).Close;
 end;
 end;
 end;
 end;

procedure TFrm_grupp.FormCreate(Sender: TObject);
begin
  fnd_naimCb.Enabled:=True;
  Grupp_condEdit.EditLabel.Caption:='Точное совпадение условию';
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  LoadFormState(Self);
end;

procedure TFrm_grupp.gruppResetRadioClick(Sender: TObject);
var
  i,j,c:Integer;
begin
      if gruppResetRadio.Checked=True then
begin
  with Frm_grupp do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with Frm_grupp do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.GruppQuery do
     begin
     Close;
     sql.Clear;
     SQL.Text:=
     'select '+
     'gruppa.grup_id,  gruppa.naim_grup, gruppa.kurs,spec.spec_maim'+' '+
      'from gruppa'+' '+
      'inner join spec on  spec.spec_id=gruppa.spec_id'+' '+
      'where 1=1';
      Open;
     end;
    with Frm_grupp do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;
end;
  Grupp_condEdit.EditLabel.Caption:='Точное совпадение условию';
    fnd_naimCb.Enabled:=True;
end;

procedure TFrm_grupp.gruppSelBtnClick(Sender: TObject);
var
  sel_grup: TADOStoredProc;
begin
  sel_grup := nil;
  try
    sel_grup := TADOStoredProc.Create(nil);
    try
      with sel_grup do
      begin
        Connection := DM.Connection;
        if not Connection.Connected then
          raise Exception.Create('Соединенме с базой не установлено');
        ProcedureName := 'sel_grup';
        Parameters.Clear;
        Parameters.CreateParameter('spec_maim', ftString,
        pdInput, 1000,
        grupp_condEdit.Text);
        Open;
        DM.gruppQuery.Close;
        DM.gruppQuery.Recordset := sel_grup.Recordset;
      end;
    except
      on E: EADOError do
        ShowMessage('Ошибка: ' + E.Message);
      on E: Exception do
        ShowMessage('Ошибка: ' + E.Message);
    end;
  finally
    FreeAndNil(sel_grup);
  end;

end;

procedure TFrm_grupp.grupp_condEditKeyPress(Sender: TObject; var Key: Char);
begin
try
   fnd_naimCb.Enabled:=false;
   dm.GruppQuery.SQL.Text:='select'+' '+
   'gruppa.grup_id,  gruppa.naim_grup, gruppa.kurs,spec.spec_maim'+' '+
      'from gruppa'+' '+
      'inner join spec on  spec.spec_id=gruppa.spec_id'+' '+
      'where 1=1'+' '+
      'and gruppa.naim_grup like'+
   QuotedStr(Concat(grupp_condEdit.Text,#37));
   dm.GruppQuery.close;
   dm.GruppQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_grupp.grupp_fnd_editKeyPress(Sender: TObject; var Key: Char);
begin
try
   dm.GruppQuery.SQL.Text:='select'+ ' '+
   'gruppa.grup_id,  gruppa.naim_grup, gruppa.kurs,spec.spec_maim'+' '+
      'from gruppa'+' '+
      'inner join spec on  spec.spec_id=gruppa.spec_id'+' '+
      'where 1=1'+' '+
      'and spec_maim like'+
   QuotedStr(Concat(grupp_fnd_edit.Text,#37));
   dm.GruppQuery.close;
   dm.GruppQuery.Open;
except   on E: EADOError do
  begin
  ShowMessage('Ошибка'+' '+E.Message);
  Exit;
  end;
end;
end;

procedure TFrm_grupp.grupp_gr_groupradioClick(Sender: TObject);
begin
if grupp_gr_groupradio.Checked=true then
  begin
    try
     with dm.GruppQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select '+
       'gruppa.grup_id,  gruppa.naim_grup, gruppa.kurs,spec.spec_maim'+' '+
      'from gruppa'+' '+
      'inner join spec on  spec.spec_id=gruppa.spec_id'+' '+
      'where 1=1'+' '+
      ' order by naim_grup  asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_grupp.Grupp_insBtnClick(Sender: TObject);
var ins_grupp:TADOStoredProc;
begin
     if (Trim(Grupp_naim_g_inp.Text) = '')and (GradeUpDown.Position=0) then
  begin
    MessageDlg('Заполните все поля', mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  ins_grupp := nil;
  try
    ins_grupp := TADOStoredProc.Create(nil);
    try
      with ins_grupp do
      begin
        Connection := DM.Connection;
        if not Connection.Connected then
        begin
          raise Exception.Create('Соединение с базой не установлено');
        end;
        ProcedureName := 'ins_grupp';
        Parameters.Clear;
        Parameters.CreateParameter(
          'naim_grup',
          ftString,
          pdInput,
          1000,
          Grupp_naim_g_inp.Text
        );
        Parameters.CreateParameter(
          'kurs',
          ftInteger,
          pdInput,
          0,
          StrToInt(GradeEdit.Text)
        );
          Parameters.CreateParameter(
          'spec_id',
          ftInteger,
          pdInput,
          0,
          SpecGrinsDBL.KeyValue
        );
        ExecProc;
        DM.GruppQuery.Close;
        DM.GruppQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
  finally
    FreeAndNil(ins_grupp);
  end;
end;


procedure TFrm_grupp.grupp_sp_groupradioClick(Sender: TObject);
begin
if grupp_sp_groupradio.Checked=true then
  begin
    try
     with dm.GruppQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select '+
       'gruppa.grup_id,  gruppa.naim_grup, gruppa.kurs,spec.spec_maim'+' '+
      'from gruppa'+' '+
      'inner join spec on  spec.spec_id=gruppa.spec_id'+' '+
      'where 1=1'+' '+
      ' order by spec_maim  asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

end.
