unit Un_les;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, Grids, DBGrids, ExtCtrls,adodb,db, DBCtrls;

type
  TFrm_les = class(TForm)
    lesPC: TPageControl;
    selTab: TTabSheet;
    insTab: TTabSheet;
    UpdTab: TTabSheet;
    DelTab: TTabSheet;
    les_inp_Box: TGroupBox;
    les_data_Box: TGroupBox;
    les_groupr_Box: TGroupBox;
    les_btn_Box: TGroupBox;
    les_sel_btn: TButton;
    les_sel_grd: TDBGrid;
    les_cond_edit: TLabeledEdit;
    les_fnd_edit: TLabeledEdit;
    les_teacher_fio_radio: TRadioButton;
    les_pred_radio: TRadioButton;
    les_reset_radio: TRadioButton;
    Teacher_data_Box: TGroupBox;
    ins_les_btn_Box: TGroupBox;
    ins_les_ins_btn: TButton;
    upd_data_Box: TGroupBox;
    upd_btn_Box: TGroupBox;
    upd_inp_Box: TGroupBox;
    upd_pred_inp: TLabeledEdit;
    predm_lbl: TStaticText;
    upd_teacher_departmetr_DBL: TDBLookupComboBox;
    upd_btn: TButton;
    del_inp_Box: TGroupBox;
    del_btn_Box: TGroupBox;
    del_data_Box: TGroupBox;
    del_btn: TButton;
    del_teacher_departmetr_DBL: TDBLookupComboBox;
    del_teacher_departmetr_lBL: TStaticText;
    ins_les_Grid: TDBGrid;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    about_lessonPC: TPageControl;
    about_lessen_Tab_one: TTabSheet;
    about_lessen_Tab_two: TTabSheet;
    ins_les_inp_Box_one: TGroupBox;
    ins_l_s_lbl: TStaticText;
    ins_l_s_dbl: TDBLookupComboBox;
    ins_l_t_lbl: TStaticText;
    ins_l_t_dbl: TDBLookupComboBox;
    ins_l_bt_lbl: TStaticText;
    ins_l_time_start_inp: TDateTimePicker;
    ins_les_inp_Box_two: TGroupBox;
    ins_l_et_lbl: TStaticText;
    ins_l_time_end_inp: TDateTimePicker;
    ins_l_type_combo: TComboBox;
    ins_l_type_lbl: TStaticText;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure les_sel_btnClick(Sender: TObject);
    procedure les_fnd_editKeyPress(Sender: TObject; var Key: Char);
    procedure les_teacher_fio_radioClick(Sender: TObject);
    procedure les_pred_radioClick(Sender: TObject);
    procedure les_reset_radioClick(Sender: TObject);
    procedure ins_les_ins_btnClick(Sender: TObject);
    procedure ins_l_type_comboChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_les: TFrm_les;
  les_st:Integer;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_les.FormActivate(Sender: TObject);
begin
  dm.teacherQuery.Open;
  dm.subjQuery.Open;
  dm.lessonQuery.Open;
  AdjustDBGridColumnWidths('Frm_les',6000, 10);
end;

procedure TFrm_les.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
  les_st:=0;
end;

procedure TFrm_les.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_les');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
  les_st:=0;
end;

procedure TFrm_les.ins_les_ins_btnClick(Sender: TObject);
var
  AreFieldsEmpty: Boolean;
begin
  AreFieldsEmpty:=(
  (ins_l_s_dbl.Text='')or
  (ins_l_t_dbl.Text='')or
  (ins_l_type_combo.Text='')
  );
  if AreFieldsEmpty then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
    try
      with dm.ins_les do
      begin
        if not dm.Connection.Connected then
          raise EDatabaseError.Create('Соединение с базой не установлено',4001);
           Parameters.ParamByName('@Nam_etap').Value :=Nam_etap_inp.Text;
           ExecProc;
           dm.lessonQuery.Close;
           dm.lessonQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise; // Повторное выбрасывание исключения
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise;
end;
end;
end;

procedure TFrm_les.ins_l_type_comboChange(Sender: TObject);
begin
if ins_l_type_combo.ItemIndex=0 then  les_st:=1
  else les_st:=0;
end;

procedure TFrm_les.les_fnd_editKeyPress(Sender: TObject; var Key: Char);
begin
  try
   dm.lessonQuery.SQL.Text:=
        'select'+' '+
        'Lesson.id_lesson,'+' '+
        'Subject.name,'+' '+
        'Teacher.fio,'+' '+
        'Lesson.date,'+' '+
        'Lesson.time_start,'+' '+
        'Lesson.time_end,'+' '+
'case when Lesson.l_type=1 then ''лекция'' else ''практика'' end as l_type'+' '+
        'from Lesson'+' '+
        'inner join Subject on Subject.id_subject=Lesson.id_subject'+' '+
        'inner join Teacher on Teacher.id_teacher=Lesson.id_teacher'+' '+
        'where 1=1'+' '+
  'and Subject.name like'+' '+
   QuotedStr(Concat(les_fnd_Edit.Text,#37));
   dm.lessonQuery.close;
   dm.lessonQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка   Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_les.les_pred_radioClick(Sender: TObject);
begin
    if  les_pred_radio.Checked=true then
  begin
    try
     with dm.lessonQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
        'Lesson.id_lesson,'+' '+
        'Subject.name,'+' '+
        'Teacher.fio,'+' '+
        'Lesson.date,'+' '+
        'Lesson.time_start,'+' '+
        'Lesson.time_end,'+' '+
'case when Lesson.l_type=1 then ''лекция'' else ''практика'' end as l_type'+' '+
        'from Lesson'+' '+
        'inner join Subject on Subject.id_subject=Lesson.id_subject'+' '+
        'inner join Teacher on Teacher.id_teacher=Lesson.id_teacher'+' '+
        'where 1=1'+' '+
        'order by Subject.name asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;
end;

procedure TFrm_les.les_reset_radioClick(Sender: TObject);
var i,j,c:Integer;
begin
  try
  if les_reset_radio.Checked then
  begin
    with Frm_les do
    begin
      for I := 0 to ComponentCount - 1 do
      begin
        if Components[I] is TLabeledEdit then
        begin
          (Components[I] as TLabeledEdit).Clear;
        end;
      end;
      for c := 0 to ComponentCount - 1 do
      begin
        if Components[c] is TCheckBox then
        begin
          (Components[c] as TCheckBox).Checked := False;
        end;
      end;
      for j := 0 to ComponentCount - 1 do
      begin
        if Components[j] is TRadioButton then
        begin
          (Components[j] as TRadioButton).Checked := False;
        end;
      end;
    end;
    with dm.lessonQuery do
    begin
      Close;
      sql.Clear;
      sql.Text :=
      'select'+' '+
        'Lesson.id_lesson,'+' '+
        'Subject.name,'+' '+
        'Teacher.fio,'+' '+
        'Lesson.date,'+' '+
        'Lesson.time_start,'+' '+
        'Lesson.time_end,'+' '+
'case when Lesson.l_type=1 then ''лекция'' else ''практика'' end as l_type'+' '+
        'from Lesson'+' '+
        'inner join Subject on Subject.id_subject=Lesson.id_subject'+' '+
        'inner join Teacher on Teacher.id_teacher=Lesson.id_teacher'+' '+
        'where 1=1';
      Open;
    end;
  end;
except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ощибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;

procedure TFrm_les.les_sel_btnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой не установлено ',4001);
    with DM.sel_t_by_fio do
    begin
      Close;
      Parameters.ParamByName('@fio').Value :=les_cond_edit.Text;
      Open;
       DM.lessonQuery.Recordset:=dm.sel_t_by_fio.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;

procedure TFrm_les.les_teacher_fio_radioClick(Sender: TObject);
begin
   if  les_teacher_fio_radio.Checked=true then
  begin
    try
     with dm.lessonQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
        'Lesson.id_lesson,'+' '+
        'Subject.name,'+' '+
        'Teacher.fio,'+' '+
        'Lesson.date,'+' '+
        'Lesson.time_start,'+' '+
        'Lesson.time_end,'+' '+
'case when Lesson.l_type=1 then ''лекция'' else ''практика'' end as l_type'+' '+
        'from Lesson'+' '+
        'inner join Subject on Subject.id_subject=Lesson.id_subject'+' '+
        'inner join Teacher on Teacher.id_teacher=Lesson.id_teacher'+' '+
        'where 1=1'+' '+
        'order by Teacher.fio asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;
end;

end.
