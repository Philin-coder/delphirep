unit Un_group;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, Grids, DBGrids, ExtCtrls,adodb,db, DBCtrls;

type
  TFrm_group = class(TForm)
    groupPC: TPageControl;
    selTab: TTabSheet;
    insTab: TTabSheet;
    UpdTab: TTabSheet;
    DelTab: TTabSheet;
    group_inp_Box: TGroupBox;
    group_data_Box: TGroupBox;
    group_groupr_Box: TGroupBox;
    group_btn_Box: TGroupBox;
    group_sel_btn: TButton;
    group_sel_grd: TDBGrid;
    group_cond_edit: TLabeledEdit;
    group_fnd_edit: TLabeledEdit;
    group_naim_radio: TRadioButton;
    group_spnaim_radio: TRadioButton;
    group_reset_radio: TRadioButton;
    ins_group_data_Box: TGroupBox;
    ins_group_inp_Box: TGroupBox;
    ins_group_btn_Box: TGroupBox;
    ins_group_ins_btn: TButton;
    ins_group_naim_inp: TLabeledEdit;
    upd_data_Box: TGroupBox;
    upd_btn_Box: TGroupBox;
    u_g_upd_inp_Box: TGroupBox;
    u_g_upd_spec_inp: TLabeledEdit;
    u_g_group_lbl: TStaticText;
    u_g_upd_spec_DBL: TDBLookupComboBox;
    upd_btn: TButton;
    del_inp_Box: TGroupBox;
    del_btn_Box: TGroupBox;
    del_data_Box: TGroupBox;
    del_btn: TButton;
    del_teacher_departmetr_DBL: TDBLookupComboBox;
    del_teacher_departmetr_lBL: TStaticText;
    ins_group_data_Grid: TDBGrid;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    ins_group_spec_lbl: TStaticText;
    ins_group_spec_dbl: TDBLookupComboBox;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure group_sel_btnClick(Sender: TObject);
    procedure group_naim_radioClick(Sender: TObject);
    procedure group_spnaim_radioClick(Sender: TObject);
    procedure group_reset_radioClick(Sender: TObject);
    procedure group_fnd_editKeyPress(Sender: TObject; var Key: Char);
    procedure ins_group_ins_btnClick(Sender: TObject);
    procedure upd_btnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_group: TFrm_group;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_group.FormActivate(Sender: TObject);
begin
  dm.specQuery.Open;
  dm.groupQuery.Open;
  AdjustDBGridColumnWidths('Frm_group',6000, 10);
end;

procedure TFrm_group.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_group.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_group');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_group.group_fnd_editKeyPress(Sender: TObject; var Key: Char);
begin
    try
   dm.groupQuery.SQL.Text:=
   'select'+' '+
       'm_Group.id_group,'+' '+
       'm_Group.group_name,'+' '+
        'Speciality.name'+' '+
        'from m_Group'+' '+
  'inner join Speciality on Speciality.id_speciality=m_Group.id_speciality'+' '+
        'where 1=1'+' '+
        'and Speciality.name like'+
   QuotedStr(Concat(group_fnd_Edit.Text,#37));
   dm.groupQuery.close;
   dm.groupQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;

  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_group.group_naim_radioClick(Sender: TObject);
begin
    if  group_naim_radio.Checked=true then
  begin
    try
     with dm.groupQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
       'select'+' '+
       'm_Group.id_group,'+' '+
       'm_Group.group_name,'+' '+
        'Speciality.name'+' '+
        'from m_Group'+' '+
  'inner join Speciality on Speciality.id_speciality=m_Group.id_speciality'+' '+
        'where 1=1'+' '+
        'order by m_Group.group_name asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка  базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;
end;

procedure TFrm_group.group_reset_radioClick(Sender: TObject);
var i,j,c:Integer;
begin
  try
  if group_reset_radio.Checked then
  begin
    with Frm_group do
    begin
      for I := 0 to ComponentCount - 1 do
      begin
        if Components[I] is TLabeledEdit then
        begin
          (Components[I] as TLabeledEdit).Clear;
        end;
      end;
      for c := 0 to ComponentCount - 1 do
      begin
        if Components[c] is TCheckBox then
        begin
          (Components[c] as TCheckBox).Checked := False;
        end;
      end;
      for j := 0 to ComponentCount - 1 do
      begin
        if Components[j] is TRadioButton then
        begin
          (Components[j] as TRadioButton).Checked := False;
        end;
      end;
    end;
    with dm.groupQuery do
    begin
      Close;
      sql.Clear;
      sql.Text :=
       'select'+' '+
       'm_Group.id_group,'+' '+
       'm_Group.group_name,'+' '+
        'Speciality.name'+' '+
        'from m_Group'+' '+
  'inner join Speciality on Speciality.id_speciality=m_Group.id_speciality'+' '+
        'where 1=1';
      Open;
    end;
  end;
except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  COM: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;

procedure TFrm_group.group_sel_btnClick(Sender: TObject);
begin
   try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой не установлено',4001);
    with DM.sel_group_by_naim do
    begin
      Close;
      Parameters.ParamByName('@group_name').Value :=group_cond_edit.Text;
      Open;
       DM.groupQuery.Recordset:=dm.sel_group_by_naim.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;

procedure TFrm_group.group_spnaim_radioClick(Sender: TObject);
begin
    if  group_spnaim_radio.Checked=true then
  begin
    try
     with dm.groupQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
       'm_Group.id_group,'+' '+
       'm_Group.group_name,'+' '+
        'Speciality.name'+' '+
        'from m_Group'+' '+
  'inner join Speciality on Speciality.id_speciality=m_Group.id_speciality'+' '+
        'where 1=1'+' '+
     'order by Speciality.name asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;
end;

procedure TFrm_group.ins_group_ins_btnClick(Sender: TObject);
const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
  AreFieldsEmpty:=(
  (Trim(ins_group_naim_inp.Text)='')or
  (ins_group_spec_dbl.Text=' ')
  );
  AreFieldsValid:=(
  ValidateComponentText(ins_group_naim_inp,AllowedChars)
  );
  if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.ins_group do
      begin
        if not dm.Connection.Connected then
          raise EDatabaseError.Create('Соединение с базой не установлено',4001);
          Parameters.ParamByName('@group_name').Value :=ins_group_naim_inp.Text;
          Parameters.ParamByName('@id_speciality').Value:=
          dm.specQuery.FieldByName('id_speciality').AsString;
           ExecProc;
           dm.groupQuery.Close;
           dm.groupQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_group.upd_btnClick(Sender: TObject);
const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
  AreFieldsEmpty:=(
  (Trim(u_g_upd_spec_inp.Text)='')or
  (u_g_upd_spec_DBL.Text)
  );
  AreFieldsValid:=(
  ValidateComponentText(u_g_upd_spec_inp,AllowedChars)
  );
  if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
end;

end.
