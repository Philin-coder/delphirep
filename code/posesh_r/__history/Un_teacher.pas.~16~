unit Un_teacher;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, Grids, DBGrids, ExtCtrls,adodb,db;

type
  TFrm_teacher = class(TForm)
    TeacherPC: TPageControl;
    selTab: TTabSheet;
    insTab: TTabSheet;
    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    teacherr_inp_Box: TGroupBox;
    teacherr_data_Box: TGroupBox;
    teacherr_groupr_Box: TGroupBox;
    teacherr_btn_Box: TGroupBox;
    teacher_sel_btn: TButton;
    teacher_sel_grd: TDBGrid;
    teacher_cond_edit: TLabeledEdit;
    teacher_fnd_edit: TLabeledEdit;
    teacher_fio_radio: TRadioButton;
    teacher_pred_radio: TRadioButton;
    teacher_reset_radio: TRadioButton;
    Teacher_data_Box: TGroupBox;
    Teacher_inp_Box: TGroupBox;
    Teacher_btn_Box: TGroupBox;
    Teacher_ins_btn: TButton;
    ins_Teacher_grid: TDBGrid;
    Teacher_predm_inp: TLabeledEdit;
    Teacher_fio_inp: TLabeledEdit;
    procedure teacher_sel_btnClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure teacher_fnd_editKeyPress(Sender: TObject; var Key: Char);
    procedure teacher_fio_radioClick(Sender: TObject);
    procedure teacher_pred_radioClick(Sender: TObject);
    procedure teacher_reset_radioClick(Sender: TObject);
    procedure Teacher_ins_btnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_teacher: TFrm_teacher;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_teacher.FormActivate(Sender: TObject);
begin
  dm.teacherQuery.Open;
  AdjustDBGridColumnWidths('Frm_teacher',6000, 10);
end;

procedure TFrm_teacher.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_teacher.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_teacher');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_teacher.teacher_fio_radioClick(Sender: TObject);
begin
   if  teacher_fio_radio.Checked=true then
  begin
    try
     with dm.TeacherQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
    'select'+' '+
    'Teacher.id_teacher,'+' '+
  'Teacher.fio,'+' '+
  'Teacher.department'+' '+
  'from'+' '+
  'Teacher where 1=1'+' '+
  'order by Teacher.fio asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;
end;

procedure TFrm_teacher.teacher_fnd_editKeyPress(Sender: TObject; var Key: Char);
begin
   try
   dm.TeacherQuery.SQL.Text:=
  'select'+' '+
  'Teacher.id_teacher,'+' '+
  'Teacher.fio,'+' '+
  'Teacher.department'+' '+
  'from'+' '+
  'Teacher where 1=1'+' '+
  'and Teacher.fio like'+' '+
   QuotedStr(Concat(teacher_fnd_Edit.Text,#37));
   dm.teacherQuery.close;
   dm.teacherQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_teacher.Teacher_ins_btnClick(Sender: TObject);
const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
  AreFieldsEmpty:=(
  (Trim(Teacher_fio_inp.Text)='')or
  (Trim(Teacher_predm_inp.Text)='')
  );
  AreFieldsValid:=(
  ValidateComponentText(Teacher_fio_inp,AllowedChars) and
  ValidateComponentText(Teacher_predm_inp,AllowedChars)
  );
  if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.ins_etap do
      begin
        if not dm.Connection.Connected then
          raise EDatabaseError.Create('Соединение с базой не установлено',4001);
           Parameters.ParamByName('@Nam_etap').Value :=Nam_etap_inp.Text;
           ExecProc;
           dm.etapQuery.Close;
           dm.etapQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise; // Повторное выбрасывание исключения
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise;
end;
end;
end;

procedure TFrm_teacher.teacher_pred_radioClick(Sender: TObject);
begin
   if  teacher_pred_radio.Checked=true then
  begin
    try
     with dm.TeacherQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
      'Teacher.id_teacher,'+' '+
     'Teacher.fio,'+' '+
     'Teacher.department'+' '+
     'from'+' '+
    'Teacher where 1=1'+' '+
     'order by  Teacher.department asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;
end;

procedure TFrm_teacher.teacher_reset_radioClick(Sender: TObject);
  var
    i,j,c:Integer;
begin
  try
  if teacher_reset_radio.Checked then
  begin
    with Frm_teacher do
    begin
      for I := 0 to ComponentCount - 1 do
      begin
        if Components[I] is TLabeledEdit then
        begin
          (Components[I] as TLabeledEdit).Clear;
        end;
      end;
      for c := 0 to ComponentCount - 1 do
      begin
        if Components[c] is TCheckBox then
        begin
          (Components[c] as TCheckBox).Checked := False;
        end;
      end;
      for j := 0 to ComponentCount - 1 do
      begin
        if Components[j] is TRadioButton then
        begin
          (Components[j] as TRadioButton).Checked := False;
        end;
      end;
    end;
    with dm.TeacherQuery do
    begin
      Close;
      sql.Clear;
      sql.Text :=
        'select'+' '+
      'Teacher.id_teacher,'+' '+
     'Teacher.fio,'+' '+
     'Teacher.department'+' '+
     'from'+' '+
    'Teacher where 1=1';
      Open;
    end;
  end;
except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;

procedure TFrm_teacher.teacher_sel_btnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой не установлено',4001);
    with DM.sel_teacher_by_fio do
    begin
      Close;
      Parameters.ParamByName('@fio').Value :=teacher_cond_edit.Text;
      Open;
       DM.TeacherQuery.Recordset:=dm.sel_teacher_by_fio.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;

end.
