unit Un_klient;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, ExtCtrls, Grids, DBGrids,DB,adodb, DBCtrls, Mask;

type
  TFrm_klient = class(TForm)
    plan_PC: TPageControl;
    selTab: TTabSheet;
    InsTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    sel_plan_InpBox: TGroupBox;
    sel_plan_btnBox: TGroupBox;
    sel_plan_grouperBox: TGroupBox;
    sel_plan_dataBox: TGroupBox;
    plan_condEdit: TLabeledEdit;
    plan_fndEdit: TLabeledEdit;
    sel_plan_btn: TButton;
    sel_plan_grd: TDBGrid;
    sel_plan_fio_m_radio: TRadioButton;
    sel_plan_opis_radio: TRadioButton;
    sel_plan_reset_radio: TRadioButton;
    man_data_box: TGroupBox;
    plan_btn_box: TGroupBox;
    Ins_plan_inp_box: TGroupBox;
    ins_plan_nazv_inp: TLabeledEdit;
    plan_ins_btn: TButton;
    plan_upd_data_Box: TGroupBox;
    plan_upd_btn_Box: TGroupBox;
    plan_upd_inp_Box: TGroupBox;
    plan_upd_pl_lbl: TStaticText;
    u_plan_id_inp: TDBLookupComboBox;
    plan_upd_btn: TButton;
    del_plan_data_box: TGroupBox;
    del_plan_inp_box: TGroupBox;
    del_plan_btn_box: TGroupBox;
    del_plan_btn: TButton;
    del_plan_pl_lbl: TStaticText;
    del_plan_id_inp_DBL: TDBLookupComboBox;
    ins_p_user_id_dbl: TDBLookupComboBox;
    ins_plan_Grd: TDBGrid;
    Plan_daten_lbl: TStaticText;
    ins_plan_date_n_inp: TDateTimePicker;
    ins_plan_opis_inp: TLabeledEdit;
    ins_plan_manager_id_lbl: TStaticText;
    plan_upd_Grd: TDBGrid;
    u_plan_date_n_lbl: TStaticText;
    U_plan_date_n_inp: TDateTimePicker;
    Del_plan_Grd: TDBGrid;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure plan_fndEditKeyPress(Sender: TObject; var Key: Char);
    procedure plan_ins_btnClick(Sender: TObject);
    procedure del_plan_btnClick(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_klient: TFrm_klient;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_klient.del_plan_btnClick(Sender: TObject);
var
  AreFieldsEmpty: Boolean;
begin
  AreFieldsEmpty:=(
  (del_plan_id_inp_DBL.Text='')
  );
  if AreFieldsEmpty then
  begin
       MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.del_mplan do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@id_plan').Value :=
           dm.PlanQuery.FieldByName('id_plan').AsString;
           ExecProc;
           dm.PlanQuery.Close;
           dm.PlanQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

procedure TFrm_klient.FormActivate(Sender: TObject);
begin
  dm.PlanQuery.Open;
  dm.manQuery.Open;
  AdjustDBGridColumnWidths('Frm_plan',6000, 10);
end;

procedure TFrm_klient.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   SaveFormState(Self);
   CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_klient.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_plan');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_klient.plan_fndEditKeyPress(Sender: TObject; var Key: Char);
begin
   try
   dm.planQuery.SQL.Text:=
     'select'+' '+
        'mplan.id_plan,'+' '+
        'mplan.nazv,'+' '+
        'mplan.date_n,'+' '+
        'mplan.opis,'+' '+
        'manager.fio'+' '+
        'from mplan'+' '+
        'inner join manager on manager.maneger_id=mplan.maneger_id'+' '+
      'where 1=1'+' '+
        'and mplan.opis like'+
   QuotedStr(Concat(plan_fndedit.Text,#37));
   dm.planQuery.close;
   dm.PlanQuery.Open;
except on E: Exception do
  begin
  ShowMessage('Ошибка'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_klient.plan_ins_btnClick(Sender: TObject);
const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
  AreFieldsEmpty:=(
  (Trim(ins_plan_nazv_inp.Text)='')or
  (Trim(ins_plan_opis_inp.Text)='')or
  (ins_p_user_id_dbl.Text='')
  );
  AreFieldsValid:=(
  ValidateComponentText(ins_plan_nazv_inp,AllowedChars)and
  ValidateComponentText(ins_plan_opis_inp,AllowedChars)
  );
  if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
   try
      with dm.ins_mplan do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@nazv').Value :=ins_plan_nazv_inp.Text;
           Parameters.ParamByName('@date_n').Value:=ins_plan_date_n_inp.Date;
           Parameters.ParamByName('@opis').Value:=ins_plan_opis_inp.Text;
           Parameters.ParamByName('@maneger_id').Value:=
           dm.manQuery.FieldByName('maneger_id').AsString;
           ExecProc;
           dm.PlanQuery.Close;
           dm.PlanQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

end.
