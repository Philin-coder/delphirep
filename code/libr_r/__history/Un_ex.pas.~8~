unit Un_ex;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, Grids, DBGrids, ExtCtrls,ADODB,db, DBCtrls;

type
  TFrm_ex = class(TForm)
    kindPC: TPageControl;
    SelTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    kind_inp_Box: TGroupBox;
    kind_Data_Box: TGroupBox;
    kind_grouper_Box: TGroupBox;
    kind_btn_Box: TGroupBox;
    kind_sel_btn: TButton;
    sel_kind_grid: TDBGrid;
    kind_radio: TRadioButton;
    reset_Radio: TRadioButton;
    KIndCondEdit: TLabeledEdit;
    KIndfndEdit: TLabeledEdit;
    ins_kind_data_Box: TGroupBox;
    ins_kind_btn_Box: TGroupBox;
    ins_kind_inp_Box: TGroupBox;
    ins_kind_btn: TButton;
    ins_Grid_grid: TDBGrid;
    ins_kind_inp: TLabeledEdit;
    Upd_kind_data_Box: TGroupBox;
    Upd_kind_inp_Box: TGroupBox;
    Upd_kind_btn_Box: TGroupBox;
    Upd_kind_btn: TButton;
    Upd_kind_data_Grid: TDBGrid;
    upd_kind_inp: TLabeledEdit;
    upd_kind_id_dbl: TDBLookupComboBox;
    upd_kind_id_lbl: TStaticText;
    kind_del_inp_Box: TGroupBox;
    kind_del_btn_Box: TGroupBox;
    kind_del_data_Box: TGroupBox;
    kind_del_inp_lbl: TStaticText;
    kind_del_inp_dbl: TDBLookupComboBox;
    kind_del_btn: TButton;
    kind_del_Grid: TDBGrid;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ins_kind_btnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_ex: TFrm_ex;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_ex.FormActivate(Sender: TObject);
begin
  dm.kindQuery.Open;
  AdjustDBGridColumnWidths('Frm_kind',6000, 10);
end;

procedure TFrm_ex.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_ex.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_kind');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_ex.ins_kind_btnClick(Sender: TObject);
const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
  AreFieldsEmpty:=(
  (Trim(ins_kind_inp.Text)='')
  );
  AreFieldsValid:=(
  ValidateComponentText(ins_kind_inp,AllowedChars)
  );
  if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.ins_kind do
      begin
        if not dm.Connection.Connected then
          raise EDatabaseError.Create('Соединение с базой не установлено',4001);
           Parameters.ParamByName('@doc_kind_naim').Value :=ins_kind_inp.Text;
           ExecProc;
           dm.kindQuery.Close;
           dm.kindQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise; // Повторное выбрасывание исключения
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise;
end;
end;
end;

end.
