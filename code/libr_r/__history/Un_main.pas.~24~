unit Un_main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus,adodb,db, ExtCtrls;
const
  FileName = 'connection_string.txt';

type
  TFrm_main = class(TForm)
    ItemMenu: TMainMenu;
    main_Image: TImage;
    kind_doc_item: TMenuItem;
    c_exit_item: TMenuItem;
    akt_in_item: TMenuItem;
    act_out_item: TMenuItem;
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure kind_doc_itemClick(Sender: TObject);
    procedure c_exit_itemClick(Sender: TObject);
    procedure akt_in_itemClick(Sender: TObject);
    procedure act_out_itemClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_main: TFrm_main;

implementation

uses Un_dm, Un_func, Un_kind, Un_c_exit, Un_act_in, Un_act_out;

{$R *.dfm}

procedure TFrm_main.FormActivate(Sender: TObject);
begin
   DisableLoginPromptsOnDataModule('dm');
   SaveConnectionStringToFile(FileName, dm.connection.ConnectionString);
end;
procedure TFrm_main.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  main_Image.Picture := nil;
  SaveFormState(Self);
end;

procedure TFrm_main.FormCreate(Sender: TObject);
begin
  SetFormPropertiesIfNeeded;
  AdjustImageProperties(main_Image);
  LoadFormState(Self);
  LoadImageFromResource('BACKGROUND_IMAGE', main_Image)
end;

procedure TFrm_main.kind_doc_itemClick(Sender: TObject);
begin
   try
    UpdateFormProperties('Frm_kind', 'Информация о виде документ',
      clBtnFace, 1024, 768);
    Frm_kind.ShowModal;
  except
    on E: Exception do
    begin
      if not (E is EMyException) then
        raise EDatabaseError.Create('Ошибка при работе с формой о виде документа', 3001);
      HandleException(E);
      if Assigned(Frm_kind) then
        Frm_kind.Free;
      raise;
    end;
  end;
end;

procedure TFrm_main.act_out_itemClick(Sender: TObject);
begin
   try
    UpdateFormProperties('Frm_act_out', 'Информация об акте выбытия',
      clBtnFace, 1024, 768);
    Frm_act_out.ShowModal;
  except
    on E: Exception do
    begin
      if not (E is EMyException) then
        raise EDatabaseError.Create('Ошибка при работе с формой акта выбытия', 3001);
      HandleException(E);
      if Assigned(Frm_act_out) then
        Frm_act_out.Free;
      raise;
    end;
  end;
end;

procedure TFrm_main.akt_in_itemClick(Sender: TObject);
begin
try
    UpdateFormProperties('Frm_act_in', 'Информация об акте приемки',
      clBtnFace, 1024, 768);
    Frm_act_in.ShowModal;
  except
    on E: Exception do
    begin
      if not (E is EMyException) then
        raise EDatabaseError.Create('Ошибка при работе с формой акта приемки', 3001);
      HandleException(E);
      if Assigned(Frm_act_in) then
        Frm_act_in.Free;
      raise;
    end;
  end;
end;

procedure TFrm_main.c_exit_itemClick(Sender: TObject);
begin
try
    UpdateFormProperties('Frm_c_exit', 'Информация о причине выбытия',
      clBtnFace, 1024, 768);
    Frm_c_exit.ShowModal;
  except
    on E: Exception do
    begin
      if not (E is EMyException) then
        raise EDatabaseError.Create('Ошибка при работе с формой о причине выбытия', 3001);
      HandleException(E);
      if Assigned(Frm_c_exit) then
        Frm_c_exit.Free;
      raise;
    end;
  end;
end;

end.
