unit Un_delivery;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, ImgList, ComCtrls, ToolWin,ADODB,db, StdCtrls, Grids,
  DBGrids, DBCtrls, Mask;

type
  Tfrm_delivery = class(TForm)
    readerToolBar: TToolBar;
    readerImageList: TImageList;
    readerPC: TPageControl;
    sel_tab: TTabSheet;
    ins_tab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    readerbtnBox: TGroupBox;
    reader_grupperBox: TGroupBox;
    readerselBtn: TButton;
    reader_data_Box: TGroupBox;
    readernaimRadio_grupper: TRadioButton;
    reader_reset_Radio: TRadioButton;
    readerGrid: TDBGrid;
    rd_upd_inp_box: TGroupBox;
    Upd_rd_data_Box: TGroupBox;
    rd_upd_lbl: TLabel;
    rd_updDBL: TDBLookupComboBox;
    upd_rd_btn_box: TGroupBox;
    upd_rd_Btn: TButton;
    rd_del_inp_Box: TGroupBox;
    rd_delLbl: TLabel;
    rd_delDBL: TDBLookupComboBox;
    rd_del_btn_Box: TGroupBox;
    rd_del_btn: TButton;
    rd_del_data_Box: TGroupBox;
    reader_condBox: TGroupBox;
    readercondedit_inp: TLabeledEdit;
    reader_fnddEdit: TLabeledEdit;
    aboutreaderPC: TPageControl;
    readerteansCB: TCheckBox;
    ins_r_data_Box: TGroupBox;
    Ins_rd_dataBox: TGroupBox;
    ins_reader_btn_Box: TGroupBox;
    Ins_book_insBtn: TButton;
    reader_datar_CB: TCheckBox;
    Name_r_inp: TLabeledEdit;
    date_b_lbl: TStaticText;
    ins_r_Grid: TDBGrid;
    Date_B_inp: TDateTimePicker;
    adr_r_inp: TLabeledEdit;
    Date_r_inp: TDateTimePicker;
    data_r_lbl: TStaticText;
    Tel_lbl: TStaticText;
    tel_inp: TMaskEdit;
    reader_updDBGrid: TDBGrid;
    upd_tel_lbl: TStaticText;
    upd_tel_inp: TMaskEdit;
    rd_delGrid: TDBGrid;
    procedure FormCreate(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormActivate(Sender: TObject);
    procedure Ins_book_insBtnClick(Sender: TObject);
    procedure adr_r_inpExit(Sender: TObject);

  private
  procedure ChangeFormColor(Sender: TObject);
  public
    { Public declarations }
  end;

var
  frm_delivery: Tfrm_delivery;
implementation

uses Un_dm, Un_func, Un_main;

{$R *.dfm}
procedure Tfrm_delivery.adr_r_inpExit(Sender: TObject);
begin
tel_inp.SetFocus;
end;

procedure Tfrm_delivery.ChangeFormColor(Sender: TObject);
begin
  if Sender is TToolButton then
  begin
    case TToolButton(Sender).Tag of
      0:readerPC.ActivePage:=delTab;
      1:readerPC.ActivePage:=Updtab;
      2:readerPC.ActivePage:=ins_Tab;
      3:readerPC.ActivePage:=sel_Tab;
    else
        readerPC.ActivePage:=sel_tab;
    end;
  end;
end;
procedure Tfrm_delivery.FormActivate(Sender: TObject);
begin
    dm.readerQuery.Open;
end;

procedure Tfrm_delivery.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var
 q:Integer;
begin
 SaveFormState(Self);
   with dm do
 begin
    for q := 0 to ComponentCount - 1 do
 begin
    if(Components[q] is TADOQuery)  then
   begin
      (Components[q] as TADOQuery).Close;
 end;
 end;
 end;
end;

procedure Tfrm_delivery.FormCreate(Sender: TObject);
const
  ButtonNames: array[0..3] of string = ('Удалить','Изменить',
  'Добавить','Выбрать');
  var
    ButtonClicks: array of TNotifyEvent;
begin
 tel_inp.EditMask := '!+7 \(999\) 000-00-00;1;_';
 upd_tel_inp.EditMask := '!+7 \(999\) 000-00-00;1;_';
 frm_reader.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
  readerImageList.Clear;
  LoadIconFromResource('DELETE_ICON',1,readerImageList);
  LoadIconFromResource('EDIT_ICON',1,readerImageList);
  LoadIconFromResource('ADD_ICON',1,readerImageList);
  LoadIconFromResource('SELECT_ICON',1,readerImageList);
  SetLength(ButtonClicks, 4);
  ButtonClicks[0] := ChangeFormColor;
  ButtonClicks[1] := ChangeFormColor;
  ButtonClicks[2] := ChangeFormColor;
  ButtonClicks[3] := ChangeFormColor;
  CreateToolBarWithButtons(Self, readerImageList, ButtonNames, ButtonClicks);
end;

procedure Tfrm_delivery.Ins_book_insBtnClick(Sender: TObject);
  const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
AreFieldsEmpty :=(
(Trim(Name_r_inp.Text) = '')or
(Trim(adr_r_inp.Text) = '')
);
AreFieldsValid :=(
 ValidateComponentText(Name_r_inp,AllowedChars)and
 ValidateComponentText(adr_r_inp,AllowedChars)
);
if AreFieldsEmpty or not AreFieldsValid then
begin
     MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
try
      with dm.INS_Reader do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@Name_R').Value :=Name_r_inp.Text;
           Parameters.ParamByName('@Date_B').Value:=DateToStr( Date_B_inp.Date);
           Parameters.ParamByName('@Adres').Value:=adr_r_inp.Text;
           Parameters.ParamByName('@Tel').Value:=tel_inp.Text;
           Parameters.ParamByName('@Date_R').Value:=DateToStr(Date_r_inp.Date);
           ExecProc;
           dm.readerQuery.Close;
           dm.readerQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;



end;

end;


