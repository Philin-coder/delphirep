unit Un_reader;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, ImgList, ComCtrls, ToolWin,ADODB,db, StdCtrls, Grids,
  DBGrids, DBCtrls, Mask;

type
  Tfrm_reader = class(TForm)
    readerToolBar: TToolBar;
    readerImageList: TImageList;
    readerPC: TPageControl;
    sel_tab: TTabSheet;
    ins_tab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    readerbtnBox: TGroupBox;
    reader_grupperBox: TGroupBox;
    readerselBtn: TButton;
    reader_data_Box: TGroupBox;
    readernaimRadio_grupper: TRadioButton;
    reader_reset_Radio: TRadioButton;
    readerGrid: TDBGrid;
    doc_upd_inp_box: TGroupBox;
    Upd_doc_data_Box: TGroupBox;
    doc_upd_lbl: TLabel;
    doc_updDBL: TDBLookupComboBox;
    upd_doc_btn_box: TGroupBox;
    upd_doc_Btn: TButton;
    doc_del_inp_Box: TGroupBox;
    doc_delLbl: TLabel;
    doc_delDBL: TDBLookupComboBox;
    doc_del_btn_Box: TGroupBox;
    doc_del_btn: TButton;
    doc_del_data_Box: TGroupBox;
    reader_condBox: TGroupBox;
    readercondedit_inp: TLabeledEdit;
    reader_fnddEdit: TLabeledEdit;
    aboutreaderPC: TPageControl;
    readerteansCB: TCheckBox;
    ins_r_data_Box: TGroupBox;
    Ins_rd_dataBox: TGroupBox;
    ins_reader_btn_Box: TGroupBox;
    Ins_book_insBtn: TButton;
    upd_datadocGrid: TDBGrid;
    upd_doc_lbl: TStaticText;
    upd_docCombo: TComboBox;
    DocdelGrid: TDBGrid;
    reader_datar_CB: TCheckBox;
    Name_r_inp: TLabeledEdit;
    date_b_lbl: TStaticText;
    ins_r_Grid: TDBGrid;
    Date_B_inp: TDateTimePicker;
    adr_r_inp: TLabeledEdit;
    Date_r_inp: TDateTimePicker;
    data_r_lbl: TStaticText;
    Tel_lbl: TStaticText;
    tel_inp: TMaskEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormActivate(Sender: TObject);
    procedure readerselBtnClick(Sender: TObject);
    procedure reader_fnddEditKeyPress(Sender: TObject; var Key: Char);
    procedure readernaimRadio_grupperClick(Sender: TObject);
    procedure reader_reset_RadioClick(Sender: TObject);
    procedure readerteansCBClick(Sender: TObject);
    procedure reader_datar_CBClick(Sender: TObject);
    procedure Ins_book_insBtnClick(Sender: TObject);
    procedure tel_inpExit(Sender: TObject);
    procedure adr_r_inpExit(Sender: TObject);

  private
  procedure ChangeFormColor(Sender: TObject);
  public
    { Public declarations }
  end;

var
  frm_reader: Tfrm_reader;
implementation

uses Un_dm, Un_func, Un_main;

{$R *.dfm}
procedure Tfrm_reader.adr_r_inpExit(Sender: TObject);
begin
tel_inp.SetFocus;
end;

procedure Tfrm_reader.ChangeFormColor(Sender: TObject);
begin
  if Sender is TToolButton then
  begin
    case TToolButton(Sender).Tag of
      0:readerPC.ActivePage:=delTab;
      1:readerPC.ActivePage:=Updtab;
      2:readerPC.ActivePage:=ins_Tab;
      3:readerPC.ActivePage:=sel_Tab;
    else
        readerPC.ActivePage:=sel_tab;
    end;
  end;
end;
procedure Tfrm_reader.FormActivate(Sender: TObject);
begin
    dm.readerQuery.Open;
end;

procedure Tfrm_reader.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var
 q:Integer;
begin
 SaveFormState(Self);
   with dm do
 begin
    for q := 0 to ComponentCount - 1 do
 begin
    if(Components[q] is TADOQuery)  then
   begin
      (Components[q] as TADOQuery).Close;
 end;
 end;
 end;
end;

procedure Tfrm_reader.FormCreate(Sender: TObject);
const
  ButtonNames: array[0..3] of string = ('Удалить','Изменить',
  'Добавить','Выбрать');
  var
    ButtonClicks: array of TNotifyEvent;
begin
 tel_inp.EditMask := '!+7 \(999\) 000-00-00;1;_';
 frm_reader.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
  readerImageList.Clear;
  LoadIconFromResource('DELETE_ICON',1,readerImageList);
  LoadIconFromResource('EDIT_ICON',1,readerImageList);
  LoadIconFromResource('ADD_ICON',1,readerImageList);
  LoadIconFromResource('SELECT_ICON',1,readerImageList);
  SetLength(ButtonClicks, 4);
  ButtonClicks[0] := ChangeFormColor;
  ButtonClicks[1] := ChangeFormColor;
  ButtonClicks[2] := ChangeFormColor;
  ButtonClicks[3] := ChangeFormColor;
  CreateToolBarWithButtons(Self, readerImageList, ButtonNames, ButtonClicks);
end;

procedure Tfrm_reader.Ins_book_insBtnClick(Sender: TObject);
  const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
AreFieldsEmpty :=(
(Trim(Name_r_inp.Text) = '')or
(Trim(adr_r_inp.Text) = '')
);
AreFieldsValid :=(
 ValidateComponentText(Name_r_inp,AllowedChars)and
 ValidateComponentText(adr_r_inp,AllowedChars)
);
if AreFieldsEmpty or not AreFieldsValid then ShowMessage('есть пустое поле')
  else ShowMessage('gut');


end;

procedure Tfrm_reader.readernaimRadio_grupperClick(Sender: TObject);
begin
 if readernaimRadio_grupper.Checked=true then
  begin
    try
     with dm.readerQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
      'reader.ID_Reader,'+' '+
      'Reader.Name_R,'+' '+
      'Reader.Date_B,'+' '+
      'Reader.Adres,'+' '+
      'Reader.Tel,'+' '+
      'Reader.Date_R'+' '+
      'from Reader where 1=1'+' '+
      'order by Reader.Name_R asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure Tfrm_reader.readerselBtnClick(Sender: TObject);
begin
try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');
    with DM.sel_reader do
    begin
      Close;
      Parameters.ParamByName('@Name_R').Value :=
      readercondedit_inp.Text;
      Open;
       DM.readerQuery.Recordset:=dm.sel_reader.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure Tfrm_reader.readerteansCBClick(Sender: TObject);
var
  CurDate:TDateTime;
begin
CurDate:=GetCurrentDateTime;
case readerteansCB.Checked of
true:
begin
try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');

    with DM.sel_reader_by_age do
    begin

      Close;
           Parameters.ParamByName('@check_date').Value :=DateToStr_(CurDate);
      Open;
       DM.readerQuery.Recordset:=dm.sel_reader_by_age.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка БД: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;
false:
begin
try
   dm.readerQuery.SQL.Text:=
    'select'+' '+
     'reader.ID_Reader,'+' '+
     'Reader.Name_R,'+' '+
     'Reader.Date_B,'+' '+
     'Reader.Adres,'+' '+
     'Reader.Tel,'+' '+
     'Reader.Date_R'+' '+
     'from Reader where 1=1';
   dm.readerQuery.close;
   dm.readerQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
end;
end;//case
end;

procedure Tfrm_reader.reader_datar_CBClick(Sender: TObject);
var
  cur_date:TDateTime;
begin
 cur_date:=GetCurrentDateTime;
 case reader_datar_CB.Checked of
 True:
 begin
    try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');
    with DM.sel_reader_by_data_r do
    begin
      Close;
           Parameters.ParamByName('@check_date').Value :=DateToStr_(cur_date);
      Open;
       DM.readerQuery.Recordset:=dm.sel_reader_by_data_r.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка БД: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;

 end;
 false:
 begin
   try
   dm.readerQuery.SQL.Text:=
    'select'+' '+
     'reader.ID_Reader,'+' '+
     'Reader.Name_R,'+' '+
     'Reader.Date_B,'+' '+
     'Reader.Adres,'+' '+
     'Reader.Tel,'+' '+
     'Reader.Date_R'+' '+
     'from Reader where 1=1';
   dm.readerQuery.close;
   dm.readerQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
 end;
 end; //case
end;

procedure Tfrm_reader.reader_fnddEditKeyPress(Sender: TObject; var Key: Char);
begin
try
   dm.readerQuery.SQL.Text:=
    'select'+' '+
     'reader.ID_Reader,'+' '+
     'Reader.Name_R,'+' '+
     'Reader.Date_B,'+' '+
     'Reader.Adres,'+' '+
     'Reader.Tel,'+' '+
     'Reader.Date_R'+' '+
     'from Reader where 1=1'+' '+
     'and Reader.Adres like'+
    QuotedStr(Concat(reader_fnddEdit.Text,#37));
   dm.readerQuery.close;
   dm.readerQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
end;

procedure Tfrm_reader.reader_reset_RadioClick(Sender: TObject);
var i,j,c:Integer;
begin
     if reader_reset_Radio.Checked then
  with frm_reader do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with frm_reader do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.readerQuery do
     begin
     Close;
     sql.Clear;
     SQL.Text:=
    'select'+' '+
    'reader.ID_Reader,'+' '+
    'Reader.Name_R,'+' '+
    'Reader.Date_B,'+' '+
    'Reader.Adres,'+''+
    'Reader.Tel,'+' '+
    'Reader.Date_R'+' '+
    'from Reader where 1=1';
     Open;
     end;
    with frm_reader do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
end;
end;


procedure Tfrm_reader.tel_inpExit(Sender: TObject);
begin
     if IsMaskEditEmpty(tel_inp) then
  begin
    tel_inp.Color := clRed; // Красный фон
    ShowMessage('Поле телефона обязательно для заполнения!');
    tel_inp.SetFocus;
  end
  else
    tel_inp.Color := clWindow; // Сброс цвета
end;

end.
