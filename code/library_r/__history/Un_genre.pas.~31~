unit Un_genre;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, ImgList, ComCtrls, ToolWin,ADODB,db, StdCtrls, Grids,
  DBGrids, DBCtrls;

type
  Tfrm_genre = class(TForm)
    GenreToolBar: TToolBar;
    GenreImageList: TImageList;
    GenrePC: TPageControl;
    sel_tab: TTabSheet;
    ins_tab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    Genre_condBox: TGroupBox;
    genrebtnBox: TGroupBox;
    Genre_grupperBox: TGroupBox;
    Genrecondedit_inp: TLabeledEdit;
    Genre_fnddEdit: TLabeledEdit;
    genreselBtn: TButton;
    genre_data_Box: TGroupBox;
    GenrenaimRadio_grupper: TRadioButton;
    Genre_reset_Radio: TRadioButton;
    GenreGrid: TDBGrid;
    gen_inpBox: TGroupBox;
    Gen_inp_btnBox: TGroupBox;
    gen_inp_dataBox: TGroupBox;
    genre_inp: TLabeledEdit;
    gen_insBon: TButton;
    gen_upd_inp_box: TGroupBox;
    Upd_gen_data_Box: TGroupBox;
    Upd_gen_naim_inp: TLabeledEdit;
    gen_upd_lbl: TLabel;
    gen_updDBL: TDBLookupComboBox;
    upd_gen_btn_box: TGroupBox;
    upd_gen_Btn: TButton;
    Aut_del_inp_Box: TGroupBox;
    aut_delLbl: TLabel;
    aut_delDBL: TDBLookupComboBox;
    aut_del_btn_Box: TGroupBox;
    aut_del_btn: TButton;
    aut_del_data_Box: TGroupBox;
    Aut_delGrid: TDBGrid;
    gen_ins_dataBox: TGroupBox;
    gen_insGrid: TDBGrid;
    gen_updGrid: TDBGrid;
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure genreselBtnClick(Sender: TObject);
    procedure Genre_fnddEditKeyPress(Sender: TObject; var Key: Char);
    procedure GenrenaimRadio_grupperClick(Sender: TObject);
    procedure Genre_reset_RadioClick(Sender: TObject);
    procedure gen_insBonClick(Sender: TObject);
    procedure upd_gen_BtnClick(Sender: TObject);
  private
  procedure ChangeFormColor(Sender: TObject);
  public
    { Public declarations }
  end;

var
  frm_genre: Tfrm_genre;

implementation

uses Un_dm, Un_func, Un_main;

{$R *.dfm}

procedure TFrm_genre.ChangeFormColor(Sender: TObject);
begin
  if Sender is TToolButton then
  begin

    case TToolButton(Sender).Tag of
      0:genrePC.ActivePage:=delTab;  //Self.Color := clRed;
      1:genrePC.ActivePage:=Updtab; //Self.Color := clGreen;
      2:genrePC.ActivePage:=ins_Tab;//Self.Color := clBlue;
      3:genrePC.ActivePage:=sel_Tab; //Self.Color := clYellow;
    else
        genrePC.ActivePage:=sel_tab;
      //Self.Color := clWhite;
    end;
  end;
end;




procedure Tfrm_genre.FormActivate(Sender: TObject);
begin
dm.GenreQuery.Open;
end;

procedure Tfrm_genre.FormClose(Sender: TObject; var Action: TCloseAction);
var q:Integer;
begin
 SaveFormState(Self);
   with dm do
 begin
    for q := 0 to ComponentCount - 1 do
 begin
    if(Components[q] is TADOQuery)  then
   begin
      (Components[q] as TADOQuery).Close;
 end;
 end;
 end;
end;

procedure Tfrm_genre.FormCreate(Sender: TObject);
const
  ButtonNames: array[0..3] of string = ('Удалить','Изменить',
  'Добавить','Выбрать');
   var
    ButtonClicks: array of TNotifyEvent;
begin
frm_genre.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
  GenreImageList.Clear;
  LoadIconFromResource('DELETE_ICON',1,GenreImageList);
  LoadIconFromResource('EDIT_ICON',1,GenreImageList);
  LoadIconFromResource('ADD_ICON',1,GenreImageList);
  LoadIconFromResource('SELECT_ICON',1,GenreImageList);
// ShowMessage(IntToStr(iconImageList.Count));
  SetLength(ButtonClicks, 4);
  ButtonClicks[0] := ChangeFormColor;
  ButtonClicks[1] := ChangeFormColor;
  ButtonClicks[2] := ChangeFormColor;
  ButtonClicks[3] := ChangeFormColor;
  CreateToolBarWithButtons(Self, GenreImageList, ButtonNames, ButtonClicks);
end;

procedure Tfrm_genre.GenrenaimRadio_grupperClick(Sender: TObject);
begin
 if GenrenaimRadio_grupper.Checked=true then
  begin
    try
     with dm.genreQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
     'select '+' '+
     'Genre.ID_Genre,'+ ' '+
     'Genre.Name_G'+' '+
     'from Genre'+' '+
     'where 1=1'+
    'Order by Genre.Name_G asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure Tfrm_genre.genreselBtnClick(Sender: TObject);
begin
try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');

    with DM.sel_genre do
    begin
      Close;
           Parameters.ParamByName('@Name_G').Value := Genrecondedit_inp.Text;
      Open;
       DM.GenreQuery.Recordset:=dm.sel_genre.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка БД: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure Tfrm_genre.Genre_fnddEditKeyPress(Sender: TObject; var Key: Char);
begin
try
    dm.GenreQuery.SQL.Text:='select'+' '+
    'Genre.ID_Genre,'+'' +
    'Genre.Name_G'+' '+
     'from Genre'+' '+
     'where 1=1'+' '+
     'and Genre.Name_G like'+
   QuotedStr(Concat(genre_fnddEdit.Text,#37));
   dm.genreQuery.close;
   dm.genreQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
end;

procedure Tfrm_genre.Genre_reset_RadioClick(Sender: TObject);
var i,j,c:Integer;
begin
if Genre_reset_Radio.Checked then
  with frm_genre do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with frm_genre do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.GenreQuery do
     begin
     Close;
     sql.Clear;
     SQL.Text:='select '+
    'Genre.ID_Genre,'+' '+
    'Genre.Name_G '+' '+
    'from Genre'+' '+
    ' where 1=1';
     Open;
     end;
    with frm_genre do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;

end;

procedure Tfrm_genre.gen_insBonClick(Sender: TObject);
const
    AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
    var
    AreFieldsEmpty: Boolean;
    AreFieldsValid: Boolean;
begin
  AreFieldsEmpty:=((Trim(genre_inp.Text) = ''));
  AreFieldsValid:=ValidateComponentText(genre_inp,AllowedChars);
  if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
    try
      with dm.ins_genre do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@Name_G').Value :=genre_inp.Text;
           ExecProc;
           dm.GenreQuery.Close;
           dm.genreQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;

end;

procedure Tfrm_genre.upd_gen_BtnClick(Sender: TObject);
const
AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
 AreFieldsEmpty: Boolean;
 AreFieldsValid: Boolean;
begin
 AreFieldsEmpty:=(
 (Trim(Upd_gen_naim_inp.Text) = '')or
 (gen_updDBL.Text=''));
 AreFieldsValid:=ValidateComponentText(Upd_gen_naim_inp,AllowedChars);
 if AreFieldsEmpty or not AreFieldsValid then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.upd_genre do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
          Parameters.ParamByName('@ID_Genre').Value:=dm.GenreQuery.
          FieldByName('@ID_Genre').AsString;
           Parameters.ParamByName('@Name_G').Value :=Upd_gen_naim_inp.Text;
           ExecProc;
           dm.GenreQuery.Close;
           dm.GenreQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;

end;

end.
