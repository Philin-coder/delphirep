unit Un_hlp;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ComCtrls;

type
  TFrm_help = class(TForm)
    linkPanel: TFlowPanel;
    sel_static: TStaticText;
    ins_Static: TStaticText;
    helpTC: TTabControl;
    upd_Static: TStaticText;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure sel_staticMouseEnter(Sender: TObject);
    procedure sel_staticMouseLeave(Sender: TObject);
    procedure sel_staticClick(Sender: TObject);
    procedure ins_StaticClick(Sender: TObject);
    procedure ins_StaticMouseEnter(Sender: TObject);
    procedure ins_StaticMouseLeave(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_help: TFrm_help;

implementation

uses Un_about, Un_func;

{$R *.dfm}

procedure TFrm_help.sel_staticClick(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    TStaticText(Sender).Font.Color := clRed;
    VisitedStaticTexts.Add(TStaticText(Sender).Name);
    helpTC.TabIndex:=0;
  end;
end;

procedure TFrm_help.sel_staticMouseEnter(Sender: TObject);
begin
    if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clRed;
  end;
end;

procedure TFrm_help.sel_staticMouseLeave(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clBlue;
  end;
  end;

procedure TFrm_help.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   SaveFormState(Self);
end;

procedure TFrm_help.FormCreate(Sender: TObject);
begin
 Frm_help.KeyPreview:=True;
 frm_help.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
 UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
  MakeStaticTextLookLikeLink(
    Self,
    'sel_static',
    sel_staticMouseEnter,
    sel_staticMouseLeave,
    sel_staticClick
  );
    MakeStaticTextLookLikeLink(
    Self,
    'ins_Static',
    ins_StaticMouseEnter,
    ins_StaticMouseLeave,
    ins_StaticClick
  );
   AlignComponentsVertically(linkPanel, 10);
end;

procedure TFrm_help.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
if Key = 112 then //  лавиша F1
begin
  try
    // —оздаем новый экземпл€р формы помощи
    with TFrm_help.Create(nil) do
    try
      UpdateFormProperties('Frm_help', '‘орма работы со справкой',
        clBtnFace, 1024, 768);

      ShowModal;
    finally
      Free;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('ќшибка при открытии формы помощи: ' + E.Message);
    end;
  end;
end;
end;

procedure TFrm_help.ins_StaticClick(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    TStaticText(Sender).Font.Color := clRed;
    VisitedStaticTexts.Add(TStaticText(Sender).Name);
  end;
  helpTC.TabIndex:=1;
end;

procedure TFrm_help.ins_StaticMouseEnter(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clRed;
  end;
end;

procedure TFrm_help.ins_StaticMouseLeave(Sender: TObject);
begin
 if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clBlue;
  end;
  end;

end.
