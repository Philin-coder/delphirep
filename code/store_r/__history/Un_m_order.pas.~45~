unit Un_m_order;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls,db,adodb, ComCtrls, Grids, DBGrids, ExtCtrls, DBCtrls;

type
  TFrm_m_order = class(TForm)
    m_orderPC: TPageControl;
    Sel_tab: TTabSheet;
    m_order_sel_grouper: TGroupBox;
    m_order_sel_data_box: TGroupBox;
    M_order_sel_btn_box: TGroupBox;
    m_order_Sel_cond_box: TGroupBox;
    m_order_selBtn: TButton;
    m_order_SelGrid: TDBGrid;
    m_order_fnd_inp: TLabeledEdit;
    m_order_cond_inp: TLabeledEdit;
    m_order_Radio_naim_gruper: TRadioButton;
    m_orderRadioSelreset: TRadioButton;
    InsTab: TTabSheet;
    ins_m_order_data_Box: TGroupBox;
    ins_m_order_btn_Box: TGroupBox;
    ins_m_order_Btn: TButton;
    UpdTab: TTabSheet;
    M_orderUpdInpBox: TGroupBox;
    M_orderUpddataBox: TGroupBox;
    M_orderUpdbtnBox: TGroupBox;
    M_orderUpdBtn: TButton;
    upd_M_order_adr_inp: TLabeledEdit;
    upd_M_order_lbl: TStaticText;
    upd_m_o_goodIdDBL: TDBLookupComboBox;
    delTab: TTabSheet;
    GooddeldataBox: TGroupBox;
    GooddekinpBox: TGroupBox;
    delgoodbtn_box: TGroupBox;
    delgoodBtn: TButton;
    Del_goodgrid: TDBGrid;
    StaticText1: TStaticText;
    delgoodDBL: TDBLookupComboBox;
    ins_m_order_Grd: TDBGrid;
    aboutorderPC: TPageControl;
    about_morder_tab: TTabSheet;
    ins_m_order_inputBox: TGroupBox;
    m_order_adres_inp: TLabeledEdit;
    order_q_inp: TLabeledEdit;
    order_q_grader: TUpDown;
    pay_way_inp: TLabeledEdit;
    aboutm_orderrabtwo: TTabSheet;
    aboutm_orderrabthree: TTabSheet;
    m_order_secondinp_Box: TGroupBox;
    get_way_inp: TLabeledEdit;
    is_get_lbl: TStaticText;
    is_payLbl: TStaticText;
    is_get_inp: TComboBox;
    is_pay_inp: TComboBox;
    m_order_inp_Boxthree: TGroupBox;
    u_mail_inp: TLabeledEdit;
    m_order_idlbl: TStaticText;
    good_idDBL: TDBLookupComboBox;
    about_order_inp: TLabeledEdit;
    updM_orderGrd: TDBGrid;
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure m_order_selBtnClick(Sender: TObject);
    procedure m_order_Radio_naim_gruperClick(Sender: TObject);
    procedure m_orderRadioSelresetClick(Sender: TObject);
    procedure m_order_fnd_inpKeyPress(Sender: TObject; var Key: Char);
    procedure ins_m_order_BtnClick(Sender: TObject);
    procedure is_get_inpChange(Sender: TObject);
    procedure is_pay_inpChange(Sender: TObject);
    procedure M_orderUpdBtnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_m_order: TFrm_m_order;
  is_get_status,
  is_pay_status:Integer;

implementation

uses Un_dm, Un_func, Un_man;

{$R *.dfm}

procedure TFrm_m_order.FormActivate(Sender: TObject);
begin
dm.goodQuery.Open;
dm.m_orderQuery.Open;
end;

procedure TFrm_m_order.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  is_get_status:=0;
  is_pay_status:=0;
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_m_order.FormCreate(Sender: TObject);
begin
is_get_status:=0;
is_pay_status:=0;
 Frm_m_order.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
 UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
end;

procedure TFrm_m_order.ins_m_order_BtnClick(Sender: TObject);
  const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.',
  'A'..'Z','a'..'z'];
var
  AreFieldEmpty:boolean;
  AreFieldValid:boolean;
begin
AreFieldEmpty:=(
(Trim(m_order_adres_inp.Text)='')or
(order_q_grader.Position=0)or
(Trim(pay_way_inp.Text)='')or
(Trim(get_way_inp.Text)='')or
(is_get_inp.Text='')or
(is_pay_inp.Text='')or
(Trim(u_mail_inp.Text)='')or
(good_idDBL.Text='')or
(Trim(about_order_inp.Text)='')
);
AreFieldValid:=(
ValidateComponentText(m_order_adres_inp,AllowedChars)and
ValidateComponentText(pay_way_inp,AllowedChars)and
ValidateComponentText(get_way_inp,AllowedChars)and
IsValidEmail(u_mail_inp.Text)and
ValidateComponentText(about_order_inp,AllowedChars)
);
if AreFieldEmpty or not AreFieldValid then
begin
 MessageDlg('Ошибка: одно из полей пустое или текст не прошёл проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
try
with dm.ins_m_order do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединенние с базой не установлено');
           Parameters.ParamByName('@adres').Value :=m_order_adres_inp.Text;
           Parameters.ParamByName('@oredr_q').Value:=
           StrToInt(order_q_inp.Text);
           Parameters.ParamByName('@pay_way').Value:=pay_way_inp.Text;
           Parameters.ParamByName('@get_way').Value:=get_way_inp.Text;
           Parameters.ParamByName('@is_get').Value:=is_get_status;
           Parameters.ParamByName('@is_pay').Value:=is_pay_status;
           Parameters.ParamByName('@u_mail').Value:=u_mail_inp.Text;
           Parameters.ParamByName('@id_good').Value:=
           dm.goodQuery.FieldByName('id_good').AsString;
           Parameters.ParamByName('@about_order').Value:=about_order_inp.Text;
           ExecProc;
           dm.m_orderquery.Close;
           dm.m_orderquery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      end;

end;

procedure TFrm_m_order.is_get_inpChange(Sender: TObject);
begin
if is_get_inp.ItemIndex=0 then is_get_status:=1 else is_get_status:=0;
end;

procedure TFrm_m_order.is_pay_inpChange(Sender: TObject);
begin
if is_pay_inp.ItemIndex=0 then is_pay_status:=1 else is_pay_status:=0 ;
end;

procedure TFrm_m_order.m_orderRadioSelresetClick(Sender: TObject);
var i,j,c:Integer;
begin
if m_orderRadioSelreset.Checked then
  with Frm_m_order do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with Frm_m_order do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.m_orderQuery do
     begin
     Close;
     sql.Clear;
     SQL.Text:='select'+' '+
     'm_order.m_order_id,'+' '+
    'm_order.adres,'+' '+
    'm_order.oredr_q,'+' '+
    'm_order.pay_way,'+' '+
    'm_order.get_way,'+
    'CASE m_order.is_get when 1 then  ''отправлен'' else ''не отправлен''end as m_get,'+' '+
    'case m_order.is_pay when 1 then ''оплачен'' else ''не оплачен'' end as m_pay,'+
    'm_order.u_mail,'+' '+
    'good.naim_good,'+
    'm_order.about_order'+' '+
    'from'+' '+
    'm_order'+' '+
    'inner join good on good.id_good=m_order.id_good'+' '+
    'where 1=1';
     Open;
     end;
    with Frm_m_order do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;
end;

procedure TFrm_m_order.M_orderUpdBtnClick(Sender: TObject);
 const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.',
  'A'..'Z','a'..'z'];
var
  AreFieldEmpty:boolean;
  AreFieldValid:boolean;
begin
AreFieldEmpty:=(
(upd_m_o_goodIdDBL.Text='')or
(Trim(upd_M_order_adr_inp.Text)='')
);
AreFieldValid:=(
ValidateComponentText(upd_M_order_adr_inp,AllowedChars)
);
if AreFieldEmpty or not AreFieldValid then
begin
   MessageDlg('Ошибка: одно из полей пустое или текст не прошёл проверку',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
 try
      with dm.upd_good do
      begin
        if not Connection.Connected then
          raise Exception.Create('?????????? ? ????? ?? ???????????');
          Parameters.ParamByName('@id_good').Value:=dm.GoodQuery.
          FieldByName('id_good').AsString;
           Parameters.ParamByName('@naim_good').Value :=upd_good_naim_inp.Text;
           ExecProc;
           dm.GoodQuery.Close;
           dm.goodQuery.Open;
        MessageDlg('????????? ???????', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('??????: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('??????: ' + E.Message);
      end;
    end;


end;

procedure TFrm_m_order.m_order_fnd_inpKeyPress(Sender: TObject; var Key: Char);
begin
try
   dm.m_orderQuery.SQL.Text:='select'+' '+
    'm_order.m_order_id,'+' '+
    'm_order.adres,'+' '+
    'm_order.oredr_q,'+' '+
    'm_order.pay_way,'+' '+
    'm_order.get_way,'+' '+
    'CASE m_order.is_get when 1 then  ''отправлен'' else ''не отправлен'' end as m_get,'+' '+
    'case m_order.is_pay when 1 then ''оплачен'' else ''не оплачен'' end as m_pay,'+' '+
    'm_order.u_mail,'+' '+
    'good.naim_good,'+' '+
    'm_order.about_order'+' '+
    'from'+' '+' '+
    'm_order'+' '+
    'inner join good on good.id_good=m_order.id_good'+' '+
    'where 1=1'+' '+
      'and good.naim_good like'+
   QuotedStr(Concat(m_order_fnd_inp.Text,#37));
   dm.m_orderQuery.close;
   dm.m_orderQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_m_order.m_order_Radio_naim_gruperClick(Sender: TObject);
begin
if m_order_Radio_naim_gruper.Checked=true then
  begin
    try
     with dm.m_orderQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
    'select'+' '+
    'm_order.m_order_id,'+' '+
    'm_order.adres,'+' '+
    'm_order.oredr_q,'+' '+
    'm_order.pay_way,'+' '+
    'm_order.get_way,'+' '+
    'CASE m_order.is_get when 1 then  ''отправлен'' else ''не отправлен'' end as m_get,'+' '+
    'case m_order.is_pay when 1 then ''оплачен'' else ''не оплачен'' end as m_pay,'+' '+
    'm_order.u_mail,'+' '+
    'good.naim_good,'+' '+
    'm_order.about_order'+' '+
    'from'+' '+' '+
    'm_order'+' '+
    'inner join good on good.id_good=m_order.id_good'+' '+
    'where 1=1'+' '+
    'order by good.naim_good desc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_m_order.m_order_selBtnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');
    with DM.sel_m_order_by_name do
    begin
      Close;
      Parameters.ParamByName('@naim_good').Value := m_order_cond_inp.Text;
      Open;
       DM.m_orderQuery.Recordset:=dm.sel_m_order_by_name.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

end.
