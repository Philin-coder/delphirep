unit Un_hlp;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls;

type
  TFrm_help = class(TForm)
    FlowPanel1: TFlowPanel;
    first_static: TStaticText;
    StaticText1: TStaticText;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure first_staticMouseEnter(Sender: TObject);
    procedure first_staticMouseLeave(Sender: TObject);
    procedure first_staticClick(Sender: TObject);
    procedure StaticText1Click(Sender: TObject);
    procedure StaticText1MouseEnter(Sender: TObject);
    procedure StaticText1MouseLeave(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_help: TFrm_help;

implementation

uses Un_about, Un_func;

{$R *.dfm}

procedure TFrm_help.first_staticClick(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    // Меняем цвет текста на красный и сохраняем имя "посещенной" ссылки
    TStaticText(Sender).Font.Color := clRed;
    VisitedStaticTexts.Add(TStaticText(Sender).Name);
    ShowMessage('2');
  end;
end;

procedure TFrm_help.first_staticMouseEnter(Sender: TObject);
begin
    if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clRed;
  end;
end;

procedure TFrm_help.first_staticMouseLeave(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clBlue;
  end;
  end;

procedure TFrm_help.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   SaveFormState(Self);
end;

procedure TFrm_help.FormCreate(Sender: TObject);
begin
 Frm_help.KeyPreview:=True;
 frm_help.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
 UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
  MakeStaticTextLookLikeLink(
    Self,
    'first_static',
    first_staticMouseEnter,
    first_staticMouseLeave,
    first_staticClick
  );
    MakeStaticTextLookLikeLink(
    Self,
    'StaticText1',
    StaticText1MouseEnter,
    StaticText1MouseLeave,
    StaticText1Click
  );
end;

procedure TFrm_help.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
if (key=112) then
begin
 try
UpdateFormProperties('Frm_help', 'Форма работы со справкой',
clBtnFace, 1024, 768);
Frm_help.ShowModal;
except
Frm_help.Free;
raise;
end;

end;

end;

procedure TFrm_help.StaticText1Click(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    // Меняем цвет текста на красный и сохраняем имя "посещенной" ссылки
    TStaticText(Sender).Font.Color := clRed;
    VisitedStaticTexts.Add(TStaticText(Sender).Name);
  end;
 ShowMessage('4');
end;

procedure TFrm_help.StaticText1MouseEnter(Sender: TObject);
begin
if Sender is TStaticText then
  begin
    // Если ссылка еще не была нажата, меняем цвет на красный при наведении
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clRed;
  end;
end;

procedure TFrm_help.StaticText1MouseLeave(Sender: TObject);
begin
 if Sender is TStaticText then
  begin
    if TStaticText(Sender).Font.Color <> clRed then
      TStaticText(Sender).Font.Color := clBlue;
  end;
  end;

end.
