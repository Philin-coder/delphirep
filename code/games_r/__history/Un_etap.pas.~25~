unit Un_etap;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,db,ADODB, Grids, DBGrids, StdCtrls, ComCtrls, ExtCtrls,ActiveX;

type
  TFrm_etap = class(TForm)
    EtapPC: TPageControl;
    SelTab: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    etapcondBox: TGroupBox;
    etapGrouperBox: TGroupBox;
    etapdataBox: TGroupBox;
    etabtnBox: TGroupBox;
    etap_sel_Btn: TButton;
    etap_selGrd: TDBGrid;
    Etap_cond_Edit: TLabeledEdit;
    Etap_fnd_Edit: TLabeledEdit;
    etap_naim_Radio: TRadioButton;
    etap_reset_Radio: TRadioButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure etap_sel_BtnClick(Sender: TObject);
    procedure etap_naim_RadioClick(Sender: TObject);
    procedure etap_reset_RadioClick(Sender: TObject);
    procedure Etap_fnd_EditKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_etap: TFrm_etap;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_etap.Etap_fnd_EditKeyPress(Sender: TObject; var Key: Char);
begin
   try
   dm.etapQuery.SQL.Text:=
   'select'+' '+
        'Etap.N_Etap,'+' '+
        'Etap.Nam_etap'+' '+
        'from Etap'+' '+
        'where 1=1'+' '+
        'and Etap.Nam_etap like'+
   QuotedStr(Concat(Etap_fnd_Edit.Text,#37));
   dm.etapQuery.close;
   dm.etapQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise; // Повторное выбрасывание исключения
  end;

  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise; // Повторное выбрасывание исключения
  end;

  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
  end;
end;

end;

procedure TFrm_etap.etap_naim_RadioClick(Sender: TObject);
begin
   if  etap_naim_Radio.Checked=true then
  begin
    try
     with dm.etapQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
       'select'+' '+
        'Etap.N_Etap,'+' '+
        'Etap.Nam_etap'+' '+
        'from Etap'+' '+
        'where 1=1'+
     'order by Etap.Nam_etap asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise; // Повторное выбрасывание исключения
  end;

  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise; // Повторное выбрасывание исключения
  end;

  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
  end;
end;
    end;
  end;



procedure TFrm_etap.etap_reset_RadioClick(Sender: TObject);
var i,j,c:Integer;
begin
try
  if etap_reset_Radio.Checked then
  begin
    with Frm_etap do
    begin
      for I := 0 to ComponentCount - 1 do
      begin
        if Components[I] is TLabeledEdit then
        begin
          (Components[I] as TLabeledEdit).Clear;
        end;
      end;
      for c := 0 to ComponentCount - 1 do
      begin
        if Components[c] is TCheckBox then
        begin
          (Components[c] as TCheckBox).Checked := False;
        end;
      end;
      for j := 0 to ComponentCount - 1 do
      begin
        if Components[j] is TRadioButton then
        begin
          (Components[j] as TRadioButton).Checked := False;
        end;
      end;
    end;
    with dm.etapQuery do
    begin
      Close;
      sql.Clear;
      sql.Text :=
     'select'+' '+
        'Etap.N_Etap,'+' '+
        'Etap.Nam_etap'+' '+
        'from Etap'+' '+
        'where 1=1';
      Open;
    end;
  end;
except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise; // Повторное выбрасывание исключения
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E); // Логирование ошибки
  end;
end;
end;


procedure TFrm_etap.etap_sel_BtnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой не установлено',4001);
    with DM.sel_etap_by_name do
    begin
      Close;
      Parameters.ParamByName('@Nam_etap').Value :=Etap_cond_Edit.Text;
      Open;
       DM.etapQuery.Recordset:=dm.sel_etap_by_name.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;

  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
  end;
end;
end;




procedure TFrm_etap.FormActivate(Sender: TObject);
begin
  dm.etapQuery.Open;
  AdjustDBGridColumnWidths('Frm_etap',6000, 10);
end;

procedure TFrm_etap.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_etap.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_etap');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

end.
