unit Un_proekt;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,db,ADODB, Grids, DBGrids, StdCtrls, ComCtrls, ExtCtrls,ActiveX,
  DBCtrls, Mask;

type
  TFrm_proekt = class(TForm)
    ProektPC: TPageControl;
    SelTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    ProektcondBox: TGroupBox;
    ProektGrouperBox: TGroupBox;
    ProektdataBox: TGroupBox;
    ProektbtnBox: TGroupBox;
    Proekt_sel_Btn: TButton;
    Proekt_selGrd: TDBGrid;
    Proekt_cond_Edit: TLabeledEdit;
    Proekt_fnd_Edit: TLabeledEdit;
    Proekt_m_fio_Radio: TRadioButton;
    Proekt_reset_Radio: TRadioButton;
    proekt_data_Box: TGroupBox;
    proekt_btn_Box: TGroupBox;
    proekt_ins_Btn: TButton;
    Worker_upd_data_Box: TGroupBox;
    Worker_upd_inpBox: TGroupBox;
    Worker_upd_btnBox: TGroupBox;
    worker_upd_btn: TButton;
    Worker_upd_uv_lbl: TStaticText;
    Worker_upd_u_dbl: TDBLookupComboBox;
    worker_del_data_Box: TGroupBox;
    worker_del_btn_Box: TGroupBox;
    worker_del_ipp_Box: TGroupBox;
    worker_del_btn: TButton;
    worker_del_e_lbl: TStaticText;
    worker_del_e_dbl: TDBLookupComboBox;
    proekt_janr_Radio: TRadioButton;
    Worker_upd_dateuv_lbl: TStaticText;
    Worker_u_date_uv_inp: TDateTimePicker;
    firecb: TCheckBox;
    ins_proekt_Grid: TDBGrid;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    about_workerPC: TPageControl;
    abot_worker_Tab_one: TTabSheet;
    abot_worker_Tab_two: TTabSheet;
    proekt_inp_box_one: TGroupBox;
    ins_proekt_nam_inp: TLabeledEdit;
    ins_pr_phone_lbl: TStaticText;
    proekt_inp_box_two: TGroupBox;
    ins_pr_cost_plan_inp: TLabeledEdit;
    ins_proekt_janr_inp: TLabeledEdit;
    ins_pr_date_nash_inp: TDateTimePicker;
    ins_pr_men_lbl: TStaticText;
    ins_pr_men_dbl: TDBLookupComboBox;
    ins_pr_cost_fact_inp: TLabeledEdit;
    ins_pr_data_end_lbl: TStaticText;
    ins_pr_data_end_inp: TDateTimePicker;
    ins_pr_data_end_plan_lbl: TStaticText;
    ins_pr_data_end_plan_inp: TDateTimePicker;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure Proekt_sel_BtnClick(Sender: TObject);
    procedure Proekt_fnd_EditKeyPress(Sender: TObject; var Key: Char);
    procedure Proekt_m_fio_RadioClick(Sender: TObject);
    procedure proekt_janr_RadioClick(Sender: TObject);
    procedure Proekt_reset_RadioClick(Sender: TObject);
    procedure proekt_ins_BtnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_proekt: TFrm_proekt;
implementation

uses Un_dm, Un_func;

{$R *.dfm}



procedure TFrm_proekt.FormActivate(Sender: TObject);
begin
  dm.menQuery.Open;
  dm.proektQuery.Open;
  AdjustDBGridColumnWidths('Frm_proekt',6000, 10);
end;

procedure TFrm_proekt.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_proekt.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_proekt');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_proekt.Proekt_fnd_EditKeyPress(Sender: TObject; var Key: Char);
begin
  try
   dm.proektQuery.SQL.Text:=
    'select'+' '+
    'Proect.N_Proekta,'+' '+
    'Proect.Nam_proect,'+' '+
    'Proect.janr,'+' '+
    'Proect.data_nash,'+' '+
    'manager.fio,'+' '+
    'Proect.cost_plan,'+' '+
    'Proect.cost_fact,'+' '+
    'Proect.dataend,'+' '+
    'Proect.dataendplan'+' '+
    'from Proect'+' '+
    'inner join manager on manager.Id_manager=Proect.id_manager'+' '+
    'where 1=1'+' '+
   'and Proect.janr like'+
   QuotedStr(Concat(proekt_fnd_Edit.Text,#37));
   dm.proektQuery.close;
   dm.proektQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_proekt.proekt_ins_BtnClick(Sender: TObject);
var
  AreFieldsEmpty: Boolean;
  PriceText: string;
  PriceValue: Int64;
begin
  AreFieldsEmpty:=(
 (Trim(ins_proekt_nam_inp.Text)='')or
 (Trim(ins_proekt_janr_inp.Text)='')or
 (Ins_pr_men_dbl.Text='')or
 (Trim(ins_pr_cost_plan_inp.Text)='')or
 (Trim(ins_pr_cost_fact_inp.Text)='')
  );
  if AreFieldsEmpty then
  begin
      MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;

end;

procedure TFrm_proekt.proekt_janr_RadioClick(Sender: TObject);
begin
     if  proekt_janr_Radio.Checked=true then
  begin
    try
     with dm.proektQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
     'select'+' '+
    'Proect.N_Proekta,'+' '+
    'Proect.Nam_proect,'+' '+
    'Proect.janr,'+' '+
    'Proect.data_nash,'+' '+
    'manager.fio,'+' '+
    'Proect.cost_plan,'+' '+
    'Proect.cost_fact,'+' '+
    'Proect.dataend,'+' '+
    'Proect.dataendplan'+' '+
    'from Proect'+' '+
    'inner join manager on manager.Id_manager=Proect.id_manager'+' '+
    'where 1=1'+' '+
     'order by  Proect.janr asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;
end;

procedure TFrm_proekt.Proekt_m_fio_RadioClick(Sender: TObject);
begin
     if  Proekt_m_fio_Radio.Checked=true then
  begin
    try
     with dm.proektQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
     'select'+' '+
    'Proect.N_Proekta,'+' '+
    'Proect.Nam_proect,'+' '+
    'Proect.janr,'+' '+
    'Proect.data_nash,'+' '+
    'manager.fio,'+' '+
    'Proect.cost_plan,'+' '+
    'Proect.cost_fact,'+' '+
    'Proect.dataend,'+' '+
    'Proect.dataendplan'+' '+
    'from Proect'+' '+
    'inner join manager on manager.Id_manager=Proect.id_manager'+' '+
    'where 1=1'+' '+
    'order by  manager.fio asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage(' Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;
end;

procedure TFrm_proekt.Proekt_reset_RadioClick(Sender: TObject);
  var
  i,j,c:Integer;
begin
  try
  if Proekt_reset_Radio.Checked then
  begin
    with Frm_proekt do
    begin
      for I := 0 to ComponentCount - 1 do
      begin
        if Components[I] is TLabeledEdit then
        begin
          (Components[I] as TLabeledEdit).Clear;
        end;
      end;
      for c := 0 to ComponentCount - 1 do
      begin
        if Components[c] is TCheckBox then
        begin
          (Components[c] as TCheckBox).Checked := False;
        end;
      end;
      for j := 0 to ComponentCount - 1 do
      begin
        if Components[j] is TRadioButton then
        begin
          (Components[j] as TRadioButton).Checked := False;
        end;
      end;
    end;
    with dm.proektQuery do
    begin
      Close;
      sql.Clear;
      sql.Text :=
       'select'+' '+
    'Proect.N_Proekta,'+' '+
    'Proect.Nam_proect,'+' '+
    'Proect.janr,'+' '+
    'Proect.data_nash,'+' '+
    'manager.fio,'+' '+
    'Proect.cost_plan,'+' '+
    'Proect.cost_fact,'+' '+
    'Proect.dataend,'+' '+
    'Proect.dataendplan'+' '+
    'from Proect'+' '+
    'inner join manager on manager.Id_manager=Proect.id_manager'+' '+
    'where 1=1';
      Open;
    end;
  end;
except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка :' + E.Message);
    HandleException(E);
    raise;
  end;
end;
end;

procedure TFrm_proekt.Proekt_sel_BtnClick(Sender: TObject);
begin
    try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой не установлено',4001);
    with DM.sel_proekt_by_men_fio do
    begin
      Close;
      Parameters.ParamByName('@manager_fio').Value :=proekt_cond_Edit.Text;
      Open;
       DM.proektQuery.Recordset:=dm.sel_proekt_by_men_fio.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных : ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка   Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;

end;

end.
