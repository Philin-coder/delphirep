unit Un_task;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,db,ADODB, Grids, DBGrids, StdCtrls, ComCtrls, ExtCtrls,ActiveX,
  DBCtrls, Mask;

type
  TFrm_task = class(TForm)
    TaskPC: TPageControl;
    SelTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    TaskcondBox: TGroupBox;
    TaskGrouperBox: TGroupBox;
    TaskdataBox: TGroupBox;
    TaskbtnBox: TGroupBox;
    Task_sel_Btn: TButton;
    Task_selGrd: TDBGrid;
    Task_cond_Edit: TLabeledEdit;
    Task_fnd_Edit: TLabeledEdit;
    Task_n_r_Radio: TRadioButton;
    task_reset_Radio: TRadioButton;
    task_data_Box: TGroupBox;
    task_btn_Box: TGroupBox;
    task_inp_Box: TGroupBox;
    task_ins_Btn: TButton;
    task_upd_data_Box: TGroupBox;
    Worker_upd_inpBox: TGroupBox;
    task_upd_btnBox: TGroupBox;
    task_upd_btn: TButton;
    task_upd_uv_lbl: TStaticText;
    task_upd_u_dbl: TDBLookupComboBox;
    worker_del_data_Box: TGroupBox;
    worker_del_btn_Box: TGroupBox;
    worker_del_ipp_Box: TGroupBox;
    worker_del_btn: TButton;
    worker_del_e_lbl: TStaticText;
    worker_del_e_dbl: TDBLookupComboBox;
    task_pr_Radio: TRadioButton;
    readysCB: TCheckBox;
    task_upd_dateuv_lbl: TStaticText;
    task_u_date_uv_inp: TDateTimePicker;
    about_taskPC: TPageControl;
    abot_tsk_Tab_one: TTabSheet;
    abot_tsk_two: TTabSheet;
    firecb: TCheckBox;
    ins_task_Grd: TDBGrid;
    updDataGrd: TDBGrid;
    DBGrid3: TDBGrid;
    sr_vip_lbl: TStaticText;
    sr_vip_inp: TDateTimePicker;
    n_rab_lbl: TStaticText;
    n_rab_dbl: TDBLookupComboBox;
    st_rab_lbl: TStaticText;
    st_rabCombo: TComboBox;
    data_nach_lbl: TStaticText;
    data_nach_inp: TDateTimePicker;
    n_proekt_lbl: TStaticText;
    n_proekt_dbl: TDBLookupComboBox;
    n_proekt_w_lbl: TStaticText;
    n_proekt_w_dbl: TDBLookupComboBox;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure Task_sel_BtnClick(Sender: TObject);
    procedure Task_fnd_EditKeyPress(Sender: TObject; var Key: Char);
    procedure Task_n_r_RadioClick(Sender: TObject);
    procedure task_pr_RadioClick(Sender: TObject);
    procedure readysCBClick(Sender: TObject);
    procedure task_reset_RadioClick(Sender: TObject);
    procedure st_rabComboChange(Sender: TObject);
    procedure task_ins_BtnClick(Sender: TObject);
    procedure task_upd_btnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_task: TFrm_task;
  ready_st:Integer;
implementation

uses Un_dm, Un_func;

{$R *.dfm}



procedure TFrm_task.FormActivate(Sender: TObject);
begin
  dm.taskQuery.Open;
  dm.workQuery.Open;
  dm.proektQuery.Open;
  dm.workerQuery.Open;
  AdjustDBGridColumnWidths('Frm_task',6000, 10);
  ready_st:=0;
end;

procedure TFrm_task.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
  ready_st:=0;
end;

procedure TFrm_task.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_task');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_task.readysCBClick(Sender: TObject);
begin
case readysCB.Checked of
true:
begin
     try
   dm.taskQuery.SQL.Text:=
    'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null'+' '+
    'and Zadanie.St_rab=1';
   dm.taskQuery.close;
   dm.taskQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;
false:
begin
   try
   dm.taskQuery.SQL.Text:=
    'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null';
   dm.taskQuery.close;
   dm.taskQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;
end; //case
end;

procedure TFrm_task.st_rabComboChange(Sender: TObject);
begin
  if st_rabCombo.ItemIndex=0 then ready_st:=1
    else ready_st:=0;
end;

procedure TFrm_task.Task_fnd_EditKeyPress(Sender: TObject; var Key: Char);
begin
  try
   dm.taskQuery.SQL.Text:=
    'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null'+' '+
   'and Work.Nam_work like'+
   QuotedStr(Concat(task_fnd_Edit.Text,#37));
   dm.taskQuery.close;
   dm.taskQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_task.task_ins_BtnClick(Sender: TObject);
var
  AreFieldsEmpty: Boolean;
begin
  AreFieldsEmpty:=(
  (n_rab_dbl.Text='')or
  (st_rabCombo.Text='')or
  (n_proekt_dbl.Text='')or
  (n_proekt_w_dbl.Text='')
  );
  if AreFieldsEmpty then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.ins_zadanie do
      begin
        if not dm.Connection.Connected then
          raise EDatabaseError.Create('Соединение с базой не установлено',4001);
           Parameters.ParamByName('@Sr_vip').Value :=sr_vip_inp.Date;
           Parameters.ParamByName('@N_Rab').Value:=
           dm.workerQuery.FieldByName('N_Rab').AsString;
           Parameters.ParamByName('@St_rab').Value:=ready_st;
           Parameters.ParamByName('@Data_nash').Value:=data_nach_inp.Date;
           Parameters.ParamByName('@N_Proekta').Value:=
           dm.proektQuery.FieldByName('N_Proekta').AsString;
           Parameters.ParamByName('@N_Work').Value:=
           dm.workQuery.FieldByName('N_Work').AsString;
           ExecProc;
           dm.taskQuery.Close;
           dm.taskQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise; // Повторное выбрасывание исключения
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E); // Логирование ошибки
    raise;
end;
end;
end;

procedure TFrm_task.Task_n_r_RadioClick(Sender: TObject);
begin
   if  Task_n_r_Radio.Checked=true then
  begin
    try
     with dm.taskQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
       'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null'+' '+
     'order by  Work.Nam_work asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка : ' + E.Message);
    HandleException(E);
  end;
end;
end;
end;

procedure TFrm_task.task_pr_RadioClick(Sender: TObject);
begin
   if  task_pr_Radio.Checked=true then
  begin
    try
     with dm.taskQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
         'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null'+' '+
     'order by  Proect.Nam_proect asc';
      Open;
     end;
    except
        on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;
end;

procedure TFrm_task.task_reset_RadioClick(Sender: TObject);
var
  i,j,c:Integer;
begin
  try
  if task_reset_Radio.Checked then
  begin
    with Frm_task do
    begin
      for I := 0 to ComponentCount - 1 do
      begin
        if Components[I] is TLabeledEdit then
        begin
          (Components[I] as TLabeledEdit).Clear;
        end;
      end;
      for c := 0 to ComponentCount - 1 do
      begin
        if Components[c] is TCheckBox then
        begin
          (Components[c] as TCheckBox).Checked := False;
        end;
      end;
      for j := 0 to ComponentCount - 1 do
      begin
        if Components[j] is TRadioButton then
        begin
          (Components[j] as TRadioButton).Checked := False;
        end;
      end;
    end;
    with dm.taskQuery do
    begin
      Close;
      sql.Clear;
      sql.Text :=
          'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null';
      Open;
    end;
  end;
except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка  базы данных: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка COM: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
  end;
end;
end;

procedure TFrm_task.Task_sel_BtnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой  не установлено',4001);
    with DM.sel_task_by_proekt_naim do
    begin
      Close;
      Parameters.ParamByName('@Nam_proect').Value :=task_cond_Edit.Text;
      Open;
       DM.taskQuery.Recordset:=dm.sel_task_by_proekt_naim.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных : ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ощибка   Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;

procedure TFrm_task.task_upd_btnClick(Sender: TObject);
var
  AreFieldsEmpty: Boolean;
begin
  AreFieldsEmpty:=(
  (task_upd_u_dbl.Text='')
  );
  if AreFieldsEmpty then
  begin

  end;
end;

end.
