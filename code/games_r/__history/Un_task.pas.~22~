unit Un_task;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,db,ADODB, Grids, DBGrids, StdCtrls, ComCtrls, ExtCtrls,ActiveX,
  DBCtrls, Mask;

type
  TFrm_task = class(TForm)
    TaskPC: TPageControl;
    SelTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    TaskcondBox: TGroupBox;
    TaskGrouperBox: TGroupBox;
    TaskdataBox: TGroupBox;
    TaskbtnBox: TGroupBox;
    Task_sel_Btn: TButton;
    Task_selGrd: TDBGrid;
    Task_cond_Edit: TLabeledEdit;
    Task_fnd_Edit: TLabeledEdit;
    Task_n_r_Radio: TRadioButton;
    task_reset_Radio: TRadioButton;
    Worker_data_Box: TGroupBox;
    Worker_btn_Box: TGroupBox;
    Worker_inp_Box: TGroupBox;
    Work_ins_Btn: TButton;
    Worker_upd_data_Box: TGroupBox;
    Worker_upd_inpBox: TGroupBox;
    Worker_upd_btnBox: TGroupBox;
    worker_upd_btn: TButton;
    Worker_upd_uv_lbl: TStaticText;
    Worker_upd_u_dbl: TDBLookupComboBox;
    worker_del_data_Box: TGroupBox;
    worker_del_btn_Box: TGroupBox;
    worker_del_ipp_Box: TGroupBox;
    worker_del_btn: TButton;
    worker_del_e_lbl: TStaticText;
    worker_del_e_dbl: TDBLookupComboBox;
    task_pr_Radio: TRadioButton;
    readysCB: TCheckBox;
    Worker_upd_dateuv_lbl: TStaticText;
    Worker_u_date_uv_inp: TDateTimePicker;
    about_workerPC: TPageControl;
    abot_worker_Tab_one: TTabSheet;
    abot_worker_Tab_two: TTabSheet;
    ins_worker_fio_inp: TLabeledEdit;
    ins_w_dol_lbl: TStaticText;
    ins_w_dol_dbl: TDBLookupComboBox;
    ins_w_phone_lbl: TStaticText;
    ins_w_phone_inp: TMaskEdit;
    free_busy_lbl: TStaticText;
    free_busy_combo: TComboBox;
    data_pr_lbl: TStaticText;
    data_pr_inp: TDateTimePicker;
    ins_w_role_lbl: TStaticText;
    ins_w_role_dbl: TDBLookupComboBox;
    firecb: TCheckBox;
    DBGrid1: TDBGrid;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure Task_sel_BtnClick(Sender: TObject);
    procedure Task_fnd_EditKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_task: TFrm_task;
implementation

uses Un_dm, Un_func;

{$R *.dfm}



procedure TFrm_task.FormActivate(Sender: TObject);
begin
  dm.taskQuery.Open;
  dm.workQuery.Open;
  dm.proektQuery.Open;
  dm.workerQuery.Open;
  AdjustDBGridColumnWidths('Frm_task',6000, 10);
end;

procedure TFrm_task.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_task.FormCreate(Sender: TObject);
begin
  UpdateFormShowHint('Frm_task');
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  UniformizeComponentAnchors(Self);
  LoadFormState(Self);
end;

procedure TFrm_task.Task_fnd_EditKeyPress(Sender: TObject; var Key: Char);
begin
  try
   dm.taskQuery.SQL.Text:=
    'select'+' '+
    'Zadanie.N_Zad,'+' '+
    'Zadanie.Sr_vip,'+' '+
    'Rabotnik.Fio,'+' '+
    'case when  Zadanie.St_rab=1 then ''Готово'' else ''Не готово'' end as work_st ,'+' '+
    'Zadanie.Data_nash,'+' '+
    'Proect.Nam_proect,'+' '+
    'Work.Nam_work'+' '+
    'from Zadanie'+' '+
    'inner join Rabotnik on Rabotnik.N_Rab=Zadanie.N_Rab'+' '+
    'inner join Proect on Proect.N_Proekta=Zadanie.N_Proekta'+' '+
    'inner join Work on Work.N_Work=Zadanie.N_Work'+' '+
    'where 1=1'+' '+
    'and Zadanie.Date_fakt is null'+
   'and Work.Nam_work like'+
   QuotedStr(Concat(task_fnd_Edit.Text,#37));
   dm.taskQuery.close;
   dm.taskQuery.Open;
except
   on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ошибка  Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    raise;
end;
end;
end;

procedure TFrm_task.Task_sel_BtnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise EDatabaseError.Create('Соединение с базой  не установлено',4001);
    with DM.sel_task_by_proekt_naim do
    begin
      Close;
      Parameters.ParamByName('@Nam_proect').Value :=task_cond_Edit.Text;
      Open;
       DM.taskQuery.Recordset:=dm.sel_task_by_proekt_naim.Recordset;
    end;
  except
  on E: EDatabaseError do
  begin
    ShowMessage('Ошибка базы данных : ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: EOleError do
  begin
    ShowMessage('Ощибка   Ole: ' + E.Message);
    HandleException(E);
    raise;
  end;
  on E: Exception do
  begin
    ShowMessage('Общая ошибка: ' + E.Message);
    HandleException(E);
    Raise;
  end;
end;
end;

end.
