unit Un_choise_pas;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls,adodb,db, ComCtrls, ExtCtrls,jpeg, Buttons;

type
  TFrm_cript_choise = class(TForm)
    cript_inp_box: TGroupBox;
    oldpasBox: TGroupBox;
    aldpasslbl: TLabel;
    pass_choiche_lbl: TStaticText;
    passKindCombo: TComboBox;
    cryortPC: TPageControl;
    RandombaseTab: TTabSheet;
    CezarTab: TTabSheet;
    morze_tab: TTabSheet;
    BloufishTab: TTabSheet;
    hashTab: TTabSheet;
    rb_input_box: TGroupBox;
    rnd_base_out_pass: TLabeledEdit;
    rnd_base_sym_amoount_inp: TLabeledEdit;
    rnd_base_grader: TUpDown;
    cryprmainBox: TGroupBox;
    cryptcondBox: TGroupBox;
    Radioruslng: TRadioButton;
    Radioenglng: TRadioButton;
    Radiomixed: TRadioButton;
    paramBox: TGroupBox;
    orignPasinp: TLabeledEdit;
    shift_inp: TLabeledEdit;
    shift_grader: TUpDown;
    newPasinp: TLabeledEdit;
    cezarbtnBox: TGroupBox;
    cezarinitBtn: TButton;
    rnd_base_btn_box: TGroupBox;
    rnd_base_init_Btn: TButton;
    imgBox: TGroupBox;
    cryptImg: TImage;
    cezar_imgBox: TGroupBox;
    cezar_cryprt_img: TImage;
    Morze_inp_Box: TGroupBox;
    Radiom_rus_text: TRadioButton;
    Radio_m_eng_text: TRadioButton;
    Radio_m_mixed_text: TRadioButton;
    morzebtinBox: TGroupBox;
    morzeinitBtn: TButton;
    morzeParamBox: TGroupBox;
    morignpas: TLabeledEdit;
    m_new_pas: TLabeledEdit;
    m_imageBox: TGroupBox;
    m_Image: TImage;
    beeperPanel: TPanel;
    bipBtn: TBitBtn;
    bloufish_inp_Box: TGroupBox;
    blpasskeyInp: TLabeledEdit;
    blpaskeygrader: TUpDown;
    blnewpas: TLabeledEdit;
    blorignpas: TLabeledEdit;
    blbtnBox: TGroupBox;
    blinitBtn: TButton;
    blimgBox: TGroupBox;
    blImg: TImage;
    hash_inp_Box: TGroupBox;
    hashUtfradio: TRadioButton;
    hash_asciiradio: TRadioButton;
    hash_paramBox: TGroupBox;
    h_orignPas_inp: TLabeledEdit;
    has_new_pas_inp: TLabeledEdit;
    has_imgBox: TGroupBox;
    hash_img: TImage;
    save_correct_pas_cb: TCheckBox;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure passKindComboChange(Sender: TObject);
    procedure cryortPCChange(Sender: TObject);
    procedure rnd_base_init_BtnClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure RadiomixedClick(Sender: TObject);
    procedure RadioenglngClick(Sender: TObject);
    procedure RadioruslngClick(Sender: TObject);
    procedure cezarinitBtnClick(Sender: TObject);
    procedure Radio_m_eng_textClick(Sender: TObject);
    procedure Radiom_rus_textClick(Sender: TObject);
    procedure Radio_m_mixed_textClick(Sender: TObject);
    procedure bipBtnClick(Sender: TObject);
    procedure morzeinitBtnClick(Sender: TObject);
    procedure blnewpasExit(Sender: TObject);
    procedure blinitBtnClick(Sender: TObject);
    procedure hashUtfradioClick(Sender: TObject);
    procedure hash_asciiradioClick(Sender: TObject);
    procedure save_correct_pas_cbClick(Sender: TObject);
  private
    get_pas:string;
    correctPas:string;
    procedure SyncTabControlAndComboBox(Sender: TObject);
    procedure SetPas(const value:string);
    procedure setcorrectPas(const value:string);
  public
     property m_pas:string read get_pas write SetPas;
     property sv_pas:string read correctpas write  SetCorrectPas;
    { Public declarations }
  end;

var
  Frm_cript_choise: TFrm_cript_choise;
  var f_crypt:AnsiString;

implementation

uses change_pas_quest, Un_dm, Un_func;

{$R *.dfm}
procedure TFrm_cript_choise.SetPas(const value:string);
begin
 get_pas:=value;
end;
procedure TFrm_cript_choise.save_correct_pas_cbClick(Sender: TObject);
var cor_p: string;
begin

if save_correct_pas_cb.Checked then
begin
case cryortPC.TabIndex of
   0:
   begin
       cor_p:=Trim(rnd_base_out_pass.Text);
       ShowMessage(cor_p);
   end;
   1:
   begin
     cor_p:=Trim(newPasinp.Text);
     ShowMessage(cor_p);
   end;
   2:
   begin
     cor_p:=Trim(m_new_pas.Text);
     ShowMessage(cor_p);
   end;
   3:
   begin
    cor_p:=Trim(blnewpas.Text);
    ShowMessage(cor_p);
   end;
   4:
   begin
     cor_p:=Trim(has_new_pas_inp.Text);
    ShowMessage(cor_p);
   end;

end;//case
if cor_p='' then
begin
     ShowMessage('Ошибка: поле не может быть пустым.');
      Exit;
end;

    Frm_cript_choise.correctPas:=cor_p;
    ShowMessage(cor_p);;
end;

end;

procedure TFrm_cript_choise.setcorrectPas(const value:string);
begin
     correctPas:=value;
end;
 procedure TFrm_cript_choise.SyncTabControlAndComboBox(Sender: TObject);
var
  IsUpdatingFromTab: Boolean;
begin
  IsUpdatingFromTab := (Sender = cryortPC);
  if IsUpdatingFromTab then
  begin
    case cryortPC.TabIndex of
      0: passKindCombo.ItemIndex := 0;
      1: passKindCombo.ItemIndex := 1;
      2: passKindCombo.ItemIndex := 2;
      3: passKindCombo.ItemIndex := 3;
      4:passKindCombo.ItemIndex := 4;
    end;
  end
  else
  begin
    case passKindCombo.ItemIndex of
      0: cryortPC.ActivePage := RandombaseTab;
      1: cryortPC.ActivePage := CezarTab;
      2: cryortPC.ActivePage := morze_tab;
      3:cryortPC.ActivePage :=BloufishTab;
      4:cryortPC.ActivePage :=hashTab;
    end;
  end;
end;
procedure TFrm_cript_choise.bipBtnClick(Sender: TObject);
var i:Integer;
begin
for i := 1 to Length(m_new_pas.Text) do
    case m_new_pas.Text[i] of
      '.': begin
             Windows.Beep(1000, 200);
             Sleep(200);
           end;
      '-': begin
             Windows.Beep(1000, 600);
             Sleep(200);
           end;
      else Continue;
    end;
  Sleep(400);
end;

procedure TFrm_cript_choise.blinitBtnClick(Sender: TObject);
var
 my_key:Word;
 sDecrypted:AnsiString;
begin
  my_key:=blpaskeygrader.Position;
  sDecrypted := Decrypt(f_crypt,my_key);
  blorignpas.Text:=sDecrypted;
end;

procedure TFrm_cript_choise.blnewpasExit(Sender: TObject);
  var
  sEncrypted :AnsiString;
  my_key:Word;
begin
   my_key:=blpaskeygrader.Position;
   sEncrypted:=Encrypt(blorignpas.Text,my_key);
    f_crypt:=sEncrypted;
   blnewpas.Text:=sEncrypted;
end;

procedure TFrm_cript_choise.cezarinitBtnClick(Sender: TObject);
var
  DecryptedText: string;
begin
if Radioruslng.Checked then
begin
     try
    DecryptedText := DecryptCaesarFromComponent(newPasinp, shift_grader.Position,
    emRussian);
   orignPasinp.Text:=DecryptedText;
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;
if Radioenglng.Checked then 
begin
     try
    DecryptedText := DecryptCaesarFromComponent(newPasinp, shift_grader.Position, 
    emLatin);
   orignPasinp.Text:=DecryptedText;
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;
if Radiomixed.Checked then 
begin
     try
    DecryptedText := DecryptCaesarFromComponent(newPasinp, shift_grader.Position, 
    emMixed);
   orignPasinp.Text:=DecryptedText;
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;


end;

procedure TFrm_cript_choise.cryortPCChange(Sender: TObject);
begin
   SyncTabControlAndComboBox(Sender);
end;

procedure TFrm_cript_choise.FormActivate(Sender: TObject);
begin
  aldpasslbl.Caption:=get_pas;
  orignPasinp.Text:=trim(aldpasslbl.Caption);
  morignPas.Text:=trim(aldpasslbl.Caption);
  blorignpas.Text:=trim(aldpasslbl.Caption);
  h_orignPas_inp.Text:=aldpasslbl.Caption;
end;

procedure TFrm_cript_choise.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
    SaveFormState(Self);
    CloseAllQueriesOnDataModule('dm');
    rnd_base_grader.Position:=0;
    f_crypt:='';
end;

procedure TFrm_cript_choise.FormCreate(Sender: TObject);
begin
 Frm_cript_choise.KeyPreview:=true;
 Frm_cript_choise.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
 UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadImageFromResource('CRYPT',cryptImg);
 LoadImageFromResource('CRYPT',cezar_cryprt_img);
 LoadImageFromResource('CRYPT',m_Image);
 LoadImageFromResource('CRYPT',blImg);
 LoadImageFromResource('CRYPT',hash_img);
 LoadFormState(Self);
 rnd_base_grader.Min:=4;
 Randomize;
  try
    FormatLabel('aldpasslbl', Self, 14, 'Arial', clGreen);
  except
    on E: Exception do
      ShowMessage(E.Message); // Отображаем сообщение об ошибке
  end;
    try
    SetFormSizeAndPosition('Frm_cript_choise', 1024, 768);
  except
    on E: Exception do
      ShowMessage(E.Message);
  end;
  with cryptImg do
  begin
      Stretch:=true;
      AutoSize:=true;
  end;
   with cezar_cryprt_img do
  begin
      Stretch:=true;
      AutoSize:=true;
  end;
   with m_Image do
  begin
      Stretch:=true;
      AutoSize:=true;
  end;
    with blImg do
  begin
      Stretch:=true;
      AutoSize:=true;
  end;
  with hash_img do
  begin
      Stretch:=true;
      AutoSize:=true;
  end;
 blpasskeyInp.ShowHint:=true;
 blpasskeyInp.Hint:='Пример ввода'+#10#13+
 '33189';
end;

procedure TFrm_cript_choise.hashUtfradioClick(Sender: TObject);
var temp_str:string;
begin
if hashUtfradio.Checked then
begin
    temp_str := ConvertToUTF8(h_orignPas_inp.Text);  // Преобразуем текст в UTF-8
    h_orignPas_inp.Text := temp_str;  // Вставляем преобразованный текст обратно
    has_new_pas_inp.Text:=md5UTF8(Trim(h_orignPas_inp.Text));
end;

end;

procedure TFrm_cript_choise.hash_asciiradioClick(Sender: TObject);
begin
 if hash_asciiradio.Checked then
  begin
  has_new_pas_inp.Text:=md5UTF8(h_orignPas_inp.Text);
  end;
end;

procedure TFrm_cript_choise.morzeinitBtnClick(Sender: TObject);
var
  MorseInput, DecodedText: string;
begin
if Radiom_rus_text.Checked then
begin
  MorseInput := m_new_pas.Text;
  DecodedText := MorseToText(MorseInput, mmRussian);
  morignpas.Text :=DecodedText;
end;
 if Radio_m_eng_text.Checked then
begin

  MorseInput := m_new_pas.Text;
  DecodedText := MorseToText(MorseInput, mmEnglish);
  morignpas.Text := DecodedText;
end;
 if Radio_m_mixed_text.Checked then
begin
  MorseInput := m_new_pas.Text;
  DecodedText := MorseToText(MorseInput, mmMixed);
  morignpas.Text := DecodedText;
end;

end;

procedure TFrm_cript_choise.passKindComboChange(Sender: TObject);
begin
    SyncTabControlAndComboBox(Sender);
end;

procedure TFrm_cript_choise.RadioenglngClick(Sender: TObject);
  var
  EncryptedText: string;
begin
if Radioenglng.Checked then
begin
try
EncryptedText := EncryptCaesarFromComponent(orignPasinp, shift_grader.Position,
emLatin);
    newPasinp.Text:= EncryptedText;
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

end;

procedure TFrm_cript_choise.RadiomixedClick(Sender: TObject);
var
  EncryptedText: string;
begin
if Radiomixed.Checked then
begin
try
EncryptedText := EncryptCaesarFromComponent(orignPasinp, shift_grader.Position,
emMixed);
    newPasinp.Text:= EncryptedText;
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;
end;


procedure TFrm_cript_choise.Radiom_rus_textClick(Sender: TObject);
var i: Integer;
     InputText, MorseText: string;
begin
    if Radiom_rus_text.Checked then
begin
  InputText := morignpas.Text;

  MorseText := '';
  for i := 1 to Length(InputText) do
  begin
    MorseText := MorseText + GetMorseChar(InputText[i], mmRussian) + ' ';
  end;
  m_new_pas.Text:=MorseText;
end;
end;

procedure TFrm_cript_choise.RadioruslngClick(Sender: TObject);
   var EncryptedText:String;
begin
if Radioruslng.Checked then
begin
try
EncryptedText := EncryptCaesarFromComponent(orignPasinp, shift_grader.Position,
emRussian);
    newPasinp.Text:= EncryptedText;
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

end;

procedure TFrm_cript_choise.Radio_m_eng_textClick(Sender: TObject);
var
  i: Integer;
  InputText, MorseText: string;
begin
if Radio_m_eng_text.Checked then
begin

  InputText := morignpas.Text;
  MorseText := '';

  for i := 1 to Length(InputText) do
  begin
    MorseText := MorseText + GetMorseChar(InputText[i], mmEnglish) + ' ';
  end;

  m_new_pas.Text:=MorseText;
end;
end;



procedure TFrm_cript_choise.Radio_m_mixed_textClick(Sender: TObject);
var i: Integer;
     InputText, MorseText: string;
begin
if Radio_m_mixed_text.Checked then
begin

  InputText := morignpas.Text;
  MorseText := '';

  for i := 1 to Length(InputText) do
  begin
    MorseText := MorseText + GetMorseChar(InputText[i], mmMixed) + ' ';
  end;

  m_new_pas.Text:=MorseText;
end;

end;

procedure TFrm_cript_choise.rnd_base_init_BtnClick(Sender: TObject);
  var rnd_string:string;
begin
  rnd_string:=get_rnd_char(rnd_base_grader.Position);
  rnd_base_out_pass.Text:=rnd_base_out_pass.Text+rnd_string;
end;

end.
