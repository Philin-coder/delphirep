unit Un_work;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, ExtCtrls, Grids, DBGrids,db,ADODB, Mask, ToolWin,
  ImgList, DBCtrls;

type
  TFrm_work = class(TForm)
    work_user_PC: TPageControl;
    selTab: TTabSheet;
    insTab: TTabSheet;
    TabSheet3: TTabSheet;
    UpdTab: TTabSheet;
    work_condBox: TGroupBox;
    m_work_groper: TGroupBox;
    m_work_dataBox: TGroupBox;
    work_btndBox: TGroupBox;
    m_work_sel_btn: TButton;
    sel_work_cond_edit: TLabeledEdit;
    sel_workGid: TDBGrid;
    sel_work_fnd_edit: TLabeledEdit;
    work_selRadioreset: TRadioButton;
    work_naim_grouper: TRadioButton;
    work_ins_inpBox: TGroupBox;
    work_ntnBox: TGroupBox;
    ins_work_dataBox: TGroupBox;
    work_insBtn: TButton;
    ins_w_work_nain_inp: TLabeledEdit;
    workToolBar: TToolBar;
    showcombtn: TToolButton;
    hidecombtn: TToolButton;
    workImageList: TImageList;
    upd_inp_box: TGroupBox;
    usr_upd_dataBox: TGroupBox;
    user_upd_btnBox: TGroupBox;
    upd_usrGrd: TDBGrid;
    upd_usr_Btn: TButton;
    upd_usr_tl_lbl: TStaticText;
    usr_upd_phone_inp: TMaskEdit;
    usr_upd_us_lbl: TStaticText;
    usr_upd_DBL: TDBLookupComboBox;
    del_usr_dataBox: TGroupBox;
    del_usr_inpBox: TGroupBox;
    del_usr_btnBox: TGroupBox;
    del_usr_Btn: TButton;
    Del_usr_datagrd: TDBGrid;
    del_usr_us_kbl: TStaticText;
    del_usr_us_DBL: TDBLookupComboBox;
    ins_work_grid: TDBGrid;
    ins_w_opis_inp: TLabeledEdit;
    work_dataLbl: TLabel;
    work_data_inp: TDateTimePicker;
    work_mark_and_about_inp: TLabeledEdit;
    ins_w_usr_Lbl: TLabel;
    ins_w_usr_DBL: TDBLookupComboBox;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure m_work_sel_btnClick(Sender: TObject);
    procedure sel_work_fnd_editKeyPress(Sender: TObject; var Key: Char);
    procedure work_naim_grouperClick(Sender: TObject);
    procedure work_selRadioresetClick(Sender: TObject);
    procedure showcombtnClick(Sender: TObject);
    procedure hidecombtnClick(Sender: TObject);
    procedure work_user_PCChange(Sender: TObject);
    procedure work_insBtnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_work: TFrm_work;

implementation

uses Un_dm, Un_func, Un_main;

{$R *.dfm}

     //DONE: add work
     //todo:add pass logik
     //todo:add report
     //DONE:hide comment
     // open_comment with  pas

procedure TFrm_work.FormActivate(Sender: TObject);
begin
 dm.muserQuery.Open;
 dm.workQuery.Open;
end;

procedure TFrm_work.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_work.FormCreate(Sender: TObject);
begin
 Frm_work.KeyPreview:=true;
 Frm_work.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
 UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
 LoadIconFromResource('LOCK',1,workImageList);
 showcombtn.ImageIndex:=0;
 LoadIconFromResource('UNLOCK',1,workImageList);
 hidecombtn.ImageIndex:=1;
 sel_workGid.Columns[4].Visible:=False;
end;

procedure TFrm_work.hidecombtnClick(Sender: TObject);
begin
   sel_workGid.Columns[4].Visible:=False;
end;

procedure TFrm_work.m_work_sel_btnClick(Sender: TObject);
begin
try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');
    with DM.sel_work_by_name do
    begin
      Close;
      Parameters.ParamByName('@work_naim').Value := sel_work_cond_edit.Text;
      Open;
       DM.workQuery.Recordset:=dm.sel_work_by_name.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure TFrm_work.sel_work_fnd_editKeyPress(Sender: TObject; var Key: Char);
begin
 try
   dm.workQuery.SQL.Text:=
   'select'+' '+
   'm_work.id_work,'+' '+
   'm_work.work_naim,'+' '+
   'm_work.work_opis,'+' '+
   'm_work.work_data,'+' '+
   'm_work.work_mark_and_about,'+' '+
   'm_user.fio'+' '+
   'from m_work'+' '+
   'inner join m_user'+' '+
    'on m_user.id_user=m_work.id_user'+' '+
    'where 1=1'+' '+
    'and m_work.work_naim like'+
   QuotedStr(Concat(sel_work_fnd_edit.Text,#37));
   dm.workQuery.close;
   dm.workQuery.Open;
except on E: Exception do
  begin
  ShowMessage('wrong situation'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_work.showcombtnClick(Sender: TObject);
begin
 sel_workGid.Columns[4].Visible:=True;
end;

procedure TFrm_work.work_insBtnClick(Sender: TObject);
const
AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
 AreFieldsEmpty:=(
 (Trim(ins_w_work_nain_inp.Text)='')or
 (Trim(ins_w_opis_inp.Text)='')or
 (Trim(work_mark_and_about_inp.Text)='')or
 (ins_w_usr_DBL.Text='')
 );
 AreFieldsValid:=(
 ValidateComponentText(ins_w_work_nain_inp,AllowedChars)and
 ValidateComponentText(ins_w_opis_inp,AllowedChars)and
 ValidateComponentText(work_mark_and_about_inp,AllowedChars)
 );
 if AreFieldsEmpty or not AreFieldsValid then
 begin
      MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
 end;
 try
      with dm.ins_work do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
          Parameters.ParamByName('@work_naim').Value :=ins_w_work_nain_inp.Text;
          Parameters.ParamByName('@work_opis').Value:=ins_w_opis_inp.Text;
          Parameters.ParamByName('@work_data').Value:=
          QuotedStr(DateToStr_(work_data_inp.Date));
          Parameters.ParamByName('@work_mark_and_about').Value:=
          work_mark_and_about_inp.Text;
          Parameters.ParamByName('@id_user').Value:=
          dm.muserQuery.FieldByName('id_user').AsString;
           ExecProc;
           dm.workQuery.Close;
           dm.workQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

procedure TFrm_work.work_naim_grouperClick(Sender: TObject);
begin
if  work_naim_grouper.Checked=true then
  begin
    try
     with dm.workQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
   'select'+' '+
   'm_work.id_work,'+' '+
   'm_work.work_naim,'+' '+
   'm_work.work_opis,'+' '+
   'm_work.work_data,'+' '+
   'm_work.work_mark_and_about,'+' '+
   'm_user.fio'+' '+
   'from m_work'+' '+
   'inner join m_user'+' '+
    'on m_user.id_user=m_work.id_user'+' '+
    'where 1=1'+' '+
    'order by m_work.work_naim asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_work.work_selRadioresetClick(Sender: TObject);
var i,j,c:Integer;
begin
if work_selRadioreset.Checked then
  with Frm_work do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with Frm_work do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.workQuery do
     begin
     Close;
     sql.Clear;
     SQL.Text:=
     'select'+' '+
     'm_work.id_work,'+' '+
   'm_work.work_naim,'+' '+
   'm_work.work_opis,'+' '+
   'm_work.work_data,'+' '+
   'm_work.work_mark_and_about,'+' '+
   'm_user.fio'+' '+
   'from m_work'+' '+
   'inner join m_user'+' '+
    'on m_user.id_user=m_work.id_user'+' '+
    'where 1=1';
     Open;
     end;
    with Frm_work do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;
     sel_workGid.Columns[4].Visible:=False;
end;

procedure TFrm_work.work_user_PCChange(Sender: TObject);
  var IsActivePage:boolean;
begin
  IsActivePage:=(work_user_PC.ActivePage=selTab);
  showcombtn.Enabled:=IsActivePage;
  hidecombtn.Enabled:=IsActivePage;
  showcombtn.Visible:=IsActivePage;
  hidecombtn.Visible:=IsActivePage;
end;
end.
