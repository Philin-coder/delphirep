unit Un_types;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,DB,ADODB, ComCtrls, StdCtrls, ExtCtrls, Grids, DBGrids, DBCtrls;

type
  TFrm_types = class(TForm)
    typePC: TPageControl;
    selTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    type_inp_boxBox: TGroupBox;
    type_data_box: TGroupBox;
    type_grouper: TGroupBox;
    type_btn_Box: TGroupBox;
    typeCondEdit: TLabeledEdit;
    typeFNDEdit: TLabeledEdit;
    type_sel_Btn: TButton;
    sel_type_GRD: TDBGrid;
    type_opisRadio: TRadioButton;
    type_m_Radio: TRadioButton;
    type_resetRadio: TRadioButton;
    ins_type_data_Box: TGroupBox;
    userbtnBox: TGroupBox;
    ins_type_inp_Box: TGroupBox;
    user_insBtn: TButton;
    ins_type_opis_inp: TLabeledEdit;
    ins_type_mechan_inp: TLabeledEdit;
    u_upd_datapBox: TGroupBox;
    uupd_inpBox: TGroupBox;
    useru_btntBox: TGroupBox;
    u_upd_Btn: TButton;
    u_username_lbl: TStaticText;
    U_upd_DBL: TDBLookupComboBox;
    U_upd_pass_inp: TLabeledEdit;
    GroupBox1: TGroupBox;
    U_delbtnBox: TGroupBox;
    u_del_data_Box: TGroupBox;
    U_del_lbl: TStaticText;
    u_delDBL: TDBLookupComboBox;
    StaticText1: TStaticText;
    u_del_btn: TButton;
    ins_type_Grd: TDBGrid;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    ins_type_tochn_inp: TLabeledEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure type_sel_BtnClick(Sender: TObject);
    procedure typeFNDEditKeyPress(Sender: TObject; var Key: Char);
    procedure type_opisRadioClick(Sender: TObject);
    procedure type_m_RadioClick(Sender: TObject);
    procedure type_resetRadioClick(Sender: TObject);
    procedure user_insBtnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_types: TFrm_types;

implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_types.FormActivate(Sender: TObject);
begin
  dm.typeQuery.Open;
  AdjustDBGridColumnWidths('Frm_types',6000, 10)
end;

procedure TFrm_types.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
  Action := caFree;
end;

procedure TFrm_types.FormCreate(Sender: TObject);
begin
  Frm_types.KeyPreview:=true;
  Frm_types.ShowHint:=true;
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  LoadFormState(Self);
end;

procedure TFrm_types.typeFNDEditKeyPress(Sender: TObject; var Key: Char);
begin
    try
   dm.typeQuery.SQL.Text:=
     'select'+' '+
  'type_s.type_id,'+' '+
  'type_s.typr_opis,'+' '+
  'type_s.mechan,'+' '+
  'type_s.tochn'+' '+
  'from type_s'+' '+
  'where 1=1'+' '+
  'and type_s.mechan like'+
   QuotedStr(Concat(typefndedit.Text,#37));
   dm.typeQuery.close;
   dm.typeQuery.Open;
except on E: Exception do
  begin
  ShowMessage('Ошибка'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_types.type_m_RadioClick(Sender: TObject);
begin
  if  type_m_Radio.Checked=true then
  begin
    try
     with dm.typeQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
  'select'+' '+
  'type_s.type_id,'+' '+
  'type_s.typr_opis,'+' '+
  'type_s.mechan,'+' '+
  'type_s.tochn'+' '+
  'from type_s'+' '+
  'where 1=1'+' '+
    'order by type_s.mechan asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка :'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_types.type_opisRadioClick(Sender: TObject);
begin
  if  type_opisRadio.Checked=true then
  begin
    try
     with dm.typeQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
  'select'+' '+
  'type_s.type_id,'+' '+
  'type_s.typr_opis,'+' '+
  'type_s.mechan,'+' '+
  'type_s.tochn'+' '+
  'from type_s'+' '+
  'where 1=1'+' '+
    'order by type_s.typr_opis asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка :'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_types.type_resetRadioClick(Sender: TObject);
var
  i,j,c:Integer;
begin
   if type_resetRadio.Checked=true then
with Frm_types do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with Frm_types do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.typeQuery do
     begin
     Close;
     sql.Clear;
     sql.Text:=
   'select'+' '+
  'type_s.type_id,'+' '+
  'type_s.typr_opis,'+' '+
  'type_s.mechan,'+' '+
  'type_s.tochn'+' '+
  'from type_s'+' '+
  'where 1=1';
  Open;
     end;
    with Frm_types do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;
end;

procedure TFrm_types.type_sel_BtnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');
    with DM.sel_by_opis do
    begin
      Close;
      Parameters.ParamByName('@typr_opis').Value :=typecondedit.Text;
      Open;
       DM.typeQuery.Recordset:=dm.sel_by_opis.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure TFrm_types.user_insBtnClick(Sender: TObject);
const
  AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;

begin
  AreFieldsEmpty:=(
  (Trim(ins_type_opis_inp.Text)='')or
  (Trim(ins_type_mechan_inp.Text)='')or
  (Trim(ins_type_tochn_inp.Text)='')
  );
  AreFieldsValid:=(
  ValidateComponentText(ins_type_opis_inp,AllowedChars)and
  ValidateComponentText(ins_type_mechan_inp,AllowedChars)AND
  ValidateComponentText(ins_type_tochn_inp,AllowedChars)
  );
  if AreFieldsEmpty or not AreFieldsValid  then
  begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
  end;
  try
      with dm.ins_type do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@typr_opis').Value :=ins_type_opis_inp.Text;
           Parameters.ParamByName('@mechan').Value:=ins_type_mechan_inp.Text;
           Parameters.ParamByName('@tochn').Value:=ins_type_tochn_inp.Text;
           ExecProc;
           dm.typeQuery.Close;
           dm.typeQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

end.
