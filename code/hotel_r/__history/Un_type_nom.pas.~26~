unit Un_type_nom;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Grids, DBGrids, StdCtrls, ExtCtrls,adodb,db, DBCtrls;

type
  TFrm_type_nom = class(TForm)
    FadminPC: TPageControl;
    seLTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    sel_typencondBox: TGroupBox;
    m_typen_grupper: TGroupBox;
    seltypenmbtnBox: TGroupBox;
    sel_typen_data_box: TGroupBox;
    tnselBtn: TButton;
    seltnselgrd: TDBGrid;
    opis_tn_cond_edit: TLabeledEdit;
    sel_tn_fnd_Edit: TLabeledEdit;
    tn_Radiotypegrupper: TRadioButton;
    tn_Radioopisgrupper: TRadioButton;
    tn_reset_radio: TRadioButton;
    ins_adm_dataBox: TGroupBox;
    ins_adm_inpBox: TGroupBox;
    ins_adm_btn_Box: TGroupBox;
    ins_admBtn: TButton;
    fio_inp: TLabeledEdit;
    ins_adm_dataGid: TDBGrid;
    sm_inp_lbl: TStaticText;
    smena_inp: TComboBox;
    liveQuercB: TCheckBox;
    lqPanel: TPanel;
    lqsvBtn: TButton;
    upd_adm_inp_Box: TGroupBox;
    upd_adm_btn_Box: TGroupBox;
    upd_adm_data_box: TGroupBox;
    upd_adm_btn: TButton;
    upd_adm_grd: TDBGrid;
    upd_adm_adm_lbl: TStaticText;
    upd_adm_u_dbl: TDBLookupComboBox;
    upd_adm_ulbl: TStaticText;
    upd_adm_sm_inp: TComboBox;
    del_adm_inpBox: TGroupBox;
    del_adm_dataBox: TGroupBox;
    del_adm_btn_Box: TGroupBox;
    del_adm_d_btn: TButton;
    del_adm_d_gr: TDBGrid;
    del_dbl_adm_lbl: TStaticText;
    del_dbl_adm_dbl: TDBLookupComboBox;
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure tnselBtnClick(Sender: TObject);
    procedure tn_RadiotypegrupperClick(Sender: TObject);
    procedure tn_RadioopisgrupperClick(Sender: TObject);
    procedure tn_reset_radioClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_type_nom: TFrm_type_nom;


implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_type_nom.FormActivate(Sender: TObject);
begin
  dm.type_nQuery.Open;
end;

procedure TFrm_type_nom.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_type_nom.FormCreate(Sender: TObject);
begin
  Frm_type_nom.KeyPreview:=true;
 Frm_type_nom.ShowHint:=true;
 UniformizeButtonsSize(Self,  273, 25);
 UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
 UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
 LoadFormState(Self);
end;

procedure TFrm_type_nom.tnselBtnClick(Sender: TObject);
begin
  try
    if not DM.Connection.Connected then
      raise Exception.Create('Cоеджжинение с базой не установлено');
    with DM.sel_type_by_opis do
    begin
      Close;
      Parameters.ParamByName('@type_opis').Value := opis_tn_cond_edit.Text;
      Open;
       DM.type_nQuery.Recordset:=dm.sel_type_by_opis.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure TFrm_type_nom.tn_RadioopisgrupperClick(Sender: TObject);
begin
if  tn_Radioopisgrupper.Checked=true then
  begin
    try
     with dm.type_nQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
     'type_nomer.id_type_nomer,'+' '+
     'type_nomer.type_naim,'+''+' '+
     'type_nomer.type_opis'+' '+
    'from type_nomer'+' '+
    'where 1=1'+' '+
    'order by type_opis asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_type_nom.tn_RadiotypegrupperClick(Sender: TObject);
begin
if  tn_Radiotypegrupper.Checked=true then
  begin
    try
     with dm.type_nQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
     'type_nomer.id_type_nomer,'+' '+
     'type_nomer.type_naim,'+''+' '+
     'type_nomer.type_opis'+' '+
    'from type_nomer'+' '+
    'where 1=1'+' '+
    'order by type_naim asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_type_nom.tn_reset_radioClick(Sender: TObject);
var i,j,c:Integer;
begin
if  tn_reset_radio.Checked=true then
with Frm_type_nom do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with Frm_type_nom do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.type_nQuery do
     begin
     Close;
     sql.Clear;
       sql.Text:=
       'select'+' '+
     'type_nomer.id_type_nomer,'+' '+
     'type_nomer.type_naim,'+''+' '+
     'type_nomer.type_opis'+' '+
    'from type_nomer'+' '+
    'where 1=1';
     Open;
     end;
    with Frm_type_nom do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;
end;

end.
