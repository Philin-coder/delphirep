unit Un_report;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Grids, DBGrids, StdCtrls, ExtCtrls,adodb,db, DBCtrls,jpeg;

type
  TFrm_report = class(TForm)
    FuslPC: TPageControl;
    delTab: TTabSheet;
    del_usl_inpBox: TGroupBox;
    del_usl_dataBox: TGroupBox;
    del_usl_btn_Box: TGroupBox;
    del_usl_d_btn: TButton;
    del_dbl_usl_lbl: TStaticText;
    del_dbl_usl_dbl: TDBLookupComboBox;
    Del_usl_grd: TDBGrid;
    procedure del_usl_d_btnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_report: TFrm_report;


implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_report.del_usl_d_btnClick(Sender: TObject);
var
   AreFieldsEmpty: Boolean;
begin
AreFieldsEmpty:=(
(del_dbl_usl_dbl.Text='')
);
if AreFieldsEmpty then
begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
try
with dm.del_usl do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@usl_id').Value :=
           dm.UslQuery.FieldByName('usl_id').AsString;
           ExecProc;
           dm.uslQuery.Close;
           dm.uslQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      end;
end;

end.
