unit Un_twiker;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,adodb,db, StdCtrls;

type
  Tfrm_twiker = class(TForm)
    Btn_save1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Btn_save1Click(Sender: TObject);
  private
    FNumber: Integer;
    procedure SetNumber(const value:Integer);
    procedure FindClosestExistingID(const TargetID: Integer);
    procedure LoadAdminInfo;
  public
    property Number:Integer read Fnumber  write setNumber;
  end;

var
  frm_twiker: Tfrm_twiker;
  init_str:string;
  ResultString: string;

implementation

uses Un_dm, Un_fadmin, Un_func;

{$R *.dfm}
procedure Tfrm_twiker.SetNumber(const value:Integer);
begin
    FNumber := value;
    ResultString := '';
    init_str:='';
    LoadAdminInfo;
end;

procedure Tfrm_twiker.Btn_save1Click(Sender: TObject);
begin
  if init_str = '' then
  begin
    ShowMessage('Имя пользователя не определено.');
    Exit;
  end;

  try
    CreateUserFolder(TransliterateToLatin( init_str)); // Создаем папку для пользователя
  except
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure Tfrm_twiker.FindClosestExistingID(const TargetID: Integer);

begin
 dm.sel_adm_by_id_q.Close;
  dm.sel_adm_by_id_q.SQL.Text :=
    'SELECT id_admin, fio_admin FROM m_admin ORDER BY id_admin';
  dm.sel_adm_by_id_q.Open;

  if dm.sel_adm_by_id_q.IsEmpty then
  begin
    ShowMessage('В базе нет администраторов.');
    Exit;
  end;

  // Сначала ищем точное совпадение
  dm.sel_adm_by_id_q.First;
  while not dm.sel_adm_by_id_q.Eof do
  begin
    if dm.sel_adm_by_id_q.FieldByName('id_admin').AsInteger = TargetID then
    begin
      ResultString := dm.sel_adm_by_id_q.FieldByName('fio_admin').AsString;
      init_str := ResultString;
      ShowMessage (TransliterateToLatin(init_str));
      Exit;
    end;
    dm.sel_adm_by_id_q.Next;
  end;

  // Ищем ближайший следующий по ID
  dm.sel_adm_by_id_q.First;
  while not dm.sel_adm_by_id_q.Eof do
  begin
    if dm.sel_adm_by_id_q.FieldByName('id_admin').AsInteger > TargetID then
    begin
      ResultString := dm.sel_adm_by_id_q.FieldByName('fio_admin').AsString;
      init_str := ResultString;
      ShowMessage(TransliterateToLatin(init_str));
      Exit;
    end;
   dm.sel_adm_by_id_q.Next;
end;
end;

procedure Tfrm_twiker.LoadAdminInfo;
begin
  init_str := '';
  ResultString := '';

  if FNumber <= 0 then
  begin
    ShowMessage('Некорректный ID пользователя.');
    Exit;
  end;

  try
    dm.sel_adm_by_id_q.Close;
    if not dm.Connection.Connected then
    begin
      dm.Connection.Connected := True;
      if not dm.Connection.Connected then
        raise Exception.Create('Не удалось установить соединение с БД.');
    end;

    with dm.sel_adm_by_id do
    begin
      Close;
      Parameters.ParamByName('@id_admin').Value := FNumber;
      Open;
    end;

    dm.sel_adm_by_id_q.Recordset := dm.sel_adm_by_id.Recordset;

    if not dm.sel_adm_by_id_q.IsEmpty then
    begin
      ResultString := VarToStr(dm.sel_adm_by_id_q.FieldByName('fio_admin').Value);
      init_str := ResultString;
      ShowMessage(TransliterateToLatin( init_str));
    end
    else
    begin
      FindClosestExistingID(FNumber);
    end;

  except
    on E: EADOError do
      ShowMessage('Ошибка ADO: ' + E.Message);
    on E: Exception do
      ShowMessage('Общая ошибка: ' + E.Message);
  end;
end;






procedure Tfrm_twiker.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
   FNumber := 0;
  ResultString := '';
  init_str := '';
end;

procedure Tfrm_twiker.FormCreate(Sender: TObject);
begin

  frm_twiker.KeyPreview:=true;
  frm_twiker.ShowHint:=true;
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  LoadFormState(Self);
  FNumber := 0;
  ResultString := '';
  init_str := '';
end;

end.
