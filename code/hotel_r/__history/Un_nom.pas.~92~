unit Un_nom;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Grids, DBGrids, StdCtrls, ExtCtrls,adodb,db, DBCtrls,jpeg;

type
  TFrm_nom = class(TForm)
    FulnomPC: TPageControl;
    seLTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    sel_nomcondBox: TGroupBox;
    m_nom_grupper: TGroupBox;
    selnommbtnBox: TGroupBox;
    sel_nom_data_box: TGroupBox;
    nomselBtn: TButton;
    selnomselgrd: TDBGrid;
    nom_kind_cond_edit: TLabeledEdit;
    sel_nom_fnd_Edit: TLabeledEdit;
    nom_Radiocos_adaygrupper: TRadioButton;
    nom_Radiokindgrupper: TRadioButton;
    nom_reset_radio: TRadioButton;
    ins_nom_dataBox: TGroupBox;
    ins_nom_inpBox: TGroupBox;
    ins_nom_btn_Box: TGroupBox;
    ins_uslBtn: TButton;
    nomer_kind_inp: TLabeledEdit;
    nomlqPanel: TPanel;
    nomlqsvBtn: TButton;
    upd_nom_btn_Box: TGroupBox;
    upd_nom_data_box: TGroupBox;
    upd_nom_btn: TButton;
    del_nom_inpBox: TGroupBox;
    del_nom_dataBox: TGroupBox;
    del_nom_btn_Box: TGroupBox;
    del_nom_d_btn: TButton;
    del_dbl_nom_lbl: TStaticText;
    del_dbl_nom_dbl: TDBLookupComboBox;
    nomer_cost_day_inp: TLabeledEdit;
    ins_nom_data_Box: TGroupBox;
    ins_nomGid: TDBGrid;
    nom_type_n__llbl: TStaticText;
    type_nomer_inp: TDBLookupComboBox;
    upd_nom_grd: TDBGrid;
    del_nom_grd: TDBGrid;
    treevcb: TCheckBox;
    nomliveQuercB: TCheckBox;
    St_nom_lbl: TStaticText;
    nom_st_combo: TComboBox;
    freeroomscb: TCheckBox;
    Nom_upd_PC: TPageControl;
    nomer_kind_tab: TTabSheet;
    checoutTab: TTabSheet;
    upd_nom_inp_Box: TGroupBox;
    upd_noml_lbl: TStaticText;
    upd_nom_id_dbl: TDBLookupComboBox;
    upd_omer_kind_inp: TLabeledEdit;
    checkoudinpBox: TGroupBox;
    checkout_nom_lbl: TStaticText;
    checkout_nomDBL: TDBLookupComboBox;
    upd_nom_st_lbl: TStaticText;
    checkout_st_combo: TComboBox;
    checkout_btnPanel: TPanel;
    checkutBtn: TButton;
    Checkoutcb: TCheckBox;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure selnomselgrdDblClick(Sender: TObject);
    procedure nomselBtnClick(Sender: TObject);
    procedure sel_nom_fnd_EditKeyPress(Sender: TObject; var Key: Char);
    procedure nom_Radiocos_adaygrupperClick(Sender: TObject);
    procedure nom_RadiokindgrupperClick(Sender: TObject);
    procedure nom_reset_radioClick(Sender: TObject);
    procedure ins_uslBtnClick(Sender: TObject);
    procedure ins_nomGidDblClick(Sender: TObject);
    procedure nomliveQuercBClick(Sender: TObject);
    procedure nomlqsvBtnClick(Sender: TObject);
    procedure upd_nom_btnClick(Sender: TObject);
    procedure del_nom_d_btnClick(Sender: TObject);
    procedure treevcbClick(Sender: TObject);
    procedure nom_st_comboChange(Sender: TObject);
    procedure freeroomscbClick(Sender: TObject);
    procedure CheckoutcbClick(Sender: TObject);
    procedure checkout_st_comboChange(Sender: TObject);
    procedure checkutBtnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_nom: TFrm_nom;
  nom_st:Integer;


implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_nom.CheckoutcbClick(Sender: TObject);
begin
case Checkoutcb.Checked of
    true:
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1 and nomer.nomer_st=1';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
  false:
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1 and nomer.nomer_st=0';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end; //case
end;

procedure TFrm_nom.checkout_st_comboChange(Sender: TObject);
begin
  case  checkout_st_combo.ItemIndex of
  0:
  begin
    nom_st:=0;
    checkutBtn.Caption:='Освободить';
     try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1 and nomer.nomer_st=0';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
  1:
  begin
    nom_st:=1;
    checkutBtn.Caption:='Заселить';
       try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1 and nomer.nomer_st=1';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
  end; //case
end;

procedure TFrm_nom.checkutBtnClick(Sender: TObject);
var
  AreFieldsEmpty: Boolean;

begin
 AreFieldsEmpty:=(
 (checkout_nomDBL.Text='')or
 (checkout_st_combo.Text='')
 );
 if AreFieldsEmpty then
 begin
      MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
 end;
 try
      with dm.check_out do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@nomer_id').Value
           :=dm.nom_query.FieldByName('nomer_id').AsString;
           ExecProc;
           dm.nom_query.Close;
           dm.nom_Query.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
 
end;

procedure TFrm_nom.del_nom_d_btnClick(Sender: TObject);
var AreFieldsEmpty: Boolean;
begin
AreFieldsEmpty:=(
(del_dbl_nom_dbl.Text='')
);
if AreFieldsEmpty then
begin
     MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
try
      with dm.del_nom do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@nomer_id').Value :=
           dm.nom_query.FieldByName('nomer_id').AsString;
           ExecProc;
           dm.nom_query.Close;
           dm.nom_query.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

procedure TFrm_nom.FormActivate(Sender: TObject);
begin
  dm.nom_query.Open;
  dm.type_nQuery.Open;
  AdjustDBGridColumnWidths('Frm_nom',6000, 10);
end;

procedure TFrm_nom.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
  nom_st:=0;
end;

procedure TFrm_nom.FormCreate(Sender: TObject);
begin
  Frm_nom.KeyPreview:=true;
  Frm_nom.ShowHint:=true;
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  LoadFormState(Self);
   upd_omer_kind_inp.ShowHint:=true;
   upd_omer_kind_inp.Hint:='Вид номера веутренний'+#10#13+
  'Вида королевский Люкс, но хотя по типам номеров это обычный люкс';
  nomer_kind_inp.ShowHint:=true;
  nomer_kind_inp.Hint:='Вид номера веутренний'+#10#13+
  'Вида Королевский Люкс, но хотя по типам номеров это обычный люкс';
  nom_st:=0;
end;

procedure TFrm_nom.freeroomscbClick(Sender: TObject);
begin
    case  freeroomscb.Checked of
    true:
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1 and nomer.nomer_st=1';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
  false:
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1 and nomer.nomer_st=0';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
   end;//case
end;

procedure TFrm_nom.ins_nomGidDblClick(Sender: TObject);
begin
  ShowImageFromDatabase(
  dm.Connection,
  'type_nomer',
  'type_image',
  'id_type_nomer',
   ins_nomGid.DataSource.DataSet.FieldByName('nomer_id').AsInteger
  );

end;

procedure TFrm_nom.ins_uslBtnClick(Sender: TObject);
//todo: fix status
const
AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
  PriceText: string;
  PriceValue: Int64;
begin
PriceText:=nomer_cost_day_inp.Text;
AreFieldsEmpty:=(
(Trim(nomer_kind_inp.Text)='')or
(Trim(nomer_cost_day_inp.Text)='')or
(type_nomer_inp.Text='')or
(nom_st_combo.Text='')
);
AreFieldsValid:=(
ValidateComponentText(nomer_kind_inp,AllowedChars)and
IsDigitsOnly(nomer_cost_day_inp.Text)
);
if AreFieldsEmpty or not AreFieldsValid then
begin
  MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
try
      with dm.ins_nom do
      begin
      PriceValue:=StrToInt64(nomer_cost_day_inp.Text);
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@nomer_kind').Value :=nomer_kind_inp.Text;
           Parameters.ParamByName('@nomer_cost_day').Value:=PriceValue;
           Parameters.ParamByName('@id_type_nomer').Value:=
           dm.type_nQuery.FieldByName('id_type_nomer').AsString;
           Parameters.ParamByName('@nomer_st').Value:=nom_st;
           ExecProc;
           dm.nom_query.Close;
           dm.nom_query.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

procedure TFrm_nom.nomliveQuercBClick(Sender: TObject);
begin
case nomliveQuercB.Checked of
true:
begin
  with dm.nom_query do
begin
  Close;
  LockType:=ltOptimistic;
  CursorType:= ctKeyset;
  CursorLocation := clUseClient;
  open;
end;
  ins_nomGid.ReadOnly:=false;
end;
false:
begin
with dm.nom_query do
begin
  Close;
  LockType:=ltOptimistic;
  CursorType:= ctStatic;
  CursorLocation := clUseClient;
  Open;
end;
  ins_nomGid.ReadOnly:=True;
end;

end;//case
end;

procedure TFrm_nom.nomlqsvBtnClick(Sender: TObject);
var
  UserResponse: Integer;
begin
dm.Connection.BeginTrans;
  try
    if dm.nom_query.State in [dsEdit, dsInsert] then
      dm.nom_Query.Post;
    UserResponse := MessageDlg('Вы хотите cохранить изменения?',
    mtConfirmation, [mbYes, mbNo], 0);
    if UserResponse = mrYes then
    begin
      dm.Connection.CommitTrans;
      dm.nom_Query.DisableControls;
      try
        dm.nom_Query.Close;
        dm.nom_Query.SQL.Text :=
        'select'+' '+
        'nomer.nomer_id,'+' '+
        'nomer.nomer_kind,'+' '+
        'nomer.nomer_cost_day,'+' '+
        'type_nomer.type_image,'+' '+
        'case '+
       'when nomer.nomer_st=0 then ''Занят'' '+
      'else ''Свободен'' '+
        'end as nom_st'+' '+
        'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
        'where 1=1';
        dm.nom_Query.Open;
      finally
        dm.nom_Query.EnableControls;
      end;
      ShowMessage('Изменения успешно сохроненны');
    end
    else
    begin
      dm.Connection.RollbackTrans;
      ShowMessage('Изменения  отменены.');
    end;
  except
    on E: Exception do
    begin
      dm.Connection.RollbackTrans;
      ShowMessage('Ошибка при сохранении данных: ' + E.Message);
    end;
  end;
end;

procedure TFrm_nom.nomselBtnClick(Sender: TObject);
begin
try
    if not DM.Connection.Connected then
      raise Exception.Create('Соединение с базой не установлено');
    with DM.sel_nom_by_kind do
    begin
      Close;
      Parameters.ParamByName('@nomer_kind').Value :=nom_kind_cond_edit.Text;
      Open;
       DM.nom_query.Recordset:=dm.sel_nom_by_kind.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure TFrm_nom.nom_Radiocos_adaygrupperClick(Sender: TObject);
begin
  if  nom_Radiocos_adaygrupper.Checked=true then
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1'+' '+
    'order by nomer_cost_day asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_nom.nom_RadiokindgrupperClick(Sender: TObject);
begin
  if  nom_Radiokindgrupper.Checked=true then
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1'+' '+
    'order by     nomer.nomer_kind desc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_nom.nom_reset_radioClick(Sender: TObject);
begin
if  nom_reset_radio.Checked=true then
  begin
    try
     with dm.nom_Query do
     begin
      close;
      sql.Clear;
      sql.Text:=
      'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_nom.nom_st_comboChange(Sender: TObject);
begin
if nom_st_combo.ItemIndex=0 then nom_st:=0
  else nom_st:=1;
end;

procedure TFrm_nom.selnomselgrdDblClick(Sender: TObject);
begin
  ShowImageFromDatabase(
  dm.Connection,
  'type_nomer',
  'type_image',
  'id_type_nomer',
   selnomselgrd.DataSource.DataSet.FieldByName('nomer_id').AsInteger
  );
end;

procedure TFrm_nom.sel_nom_fnd_EditKeyPress(Sender: TObject; var Key: Char);
begin
  try
   dm.nom_query.SQL.Text:=
   'select'+' '+
   'nomer.nomer_id,'+' '+
    'nomer.nomer_kind,'+' '+
    'nomer.nomer_cost_day,'+' '+
    'type_nomer.type_image,'+' '+
    'case '+
  'when nomer.nomer_st=0 then ''Занят'' '+
  'else ''Свободен'' '+' '+
 'end as nom_st'+' '+
    'from nomer'+' '+
    'inner join  type_nomer on type_nomer.id_type_nomer=nomer.id_type_nomer'+' '+
    'where 1=1'+' '+
   'and nomer.nomer_kind like'+
   QuotedStr(Concat(sel_nom_fnd_edit.Text,#37));
   dm.nom_Query.close;
   dm.nom_Query.Open;
except on E: Exception do
  begin
  ShowMessage('Ошибка'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_nom.treevcbClick(Sender: TObject);
begin
 if treevcb.Checked then
 begin
       ShowDBGridInTreeView(Self, 'selnomselgrd');
 end;
end;

procedure TFrm_nom.upd_nom_btnClick(Sender: TObject);
const
AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
AreFieldsEmpty:=(
(upd_nom_id_dbl.Text='')or
(Trim(upd_omer_kind_inp.Text)='')
);
AreFieldsValid:=(
ValidateComponentText(upd_omer_kind_inp,AllowedChars)
);
if AreFieldsEmpty or not AreFieldsValid then
begin
  MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;
try
      with dm.upd_nom do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@nomer_id').Value :=
           dm.nom_query.FieldByName('nomer_id').AsString;
           Parameters.ParamByName('@nomer_kind').Value:=upd_omer_kind_inp.Text;
           ExecProc;
           dm.nom_Query.Close;
           dm.nom_Query.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

end.
