unit Un_dog;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Grids, DBGrids, StdCtrls, ExtCtrls,adodb,db, DBCtrls,jpeg;

type
  TFrm_dog = class(TForm)
    FdogPC: TPageControl;
    seLTab: TTabSheet;
    insTab: TTabSheet;
    updTab: TTabSheet;
    delTab: TTabSheet;
    sel_dog_condBox: TGroupBox;
    m_dog_grupper: TGroupBox;
    sel_dog_btnBox: TGroupBox;
    sel_dog_data_box: TGroupBox;
    dogselBtn: TButton;
    dog_fio_cond_edit: TLabeledEdit;
    sel_dog_reg_fnd_Edit: TLabeledEdit;
    dog_Radiofiogrupper: TRadioButton;
    dog_Radiodate_d_grupper: TRadioButton;
    dog_reset_radio: TRadioButton;
    ins_dog_btn_Box: TGroupBox;
    ins_dogBtn: TButton;
    upd_dog_inp_Box: TGroupBox;
    upd_dog_btn_Box: TGroupBox;
    upd_dog_data_box: TGroupBox;
    upd_dog_btn: TButton;
    upd_dog_lbl: TStaticText;
    upd_dog_d_dbl: TDBLookupComboBox;
    del_usl_inpBox: TGroupBox;
    del_usl_dataBox: TGroupBox;
    del_usl_btn_Box: TGroupBox;
    del_usl_d_btn: TButton;
    del_dbl_usl_lbl: TStaticText;
    del_dbl_usl_dbl: TDBLookupComboBox;
    upd_dogl_perpose_inp: TLabeledEdit;
    Del_usl_grd: TDBGrid;
    sel_dogGrd: TDBGrid;
    about_dog_pc: TPageControl;
    dogqPanel: TPanel;
    dogqsvBtn: TButton;
    ins_dog_dataBox: TGroupBox;
    ins_tn_data_Box: TGroupBox;
    ins_dog_grd: TDBGrid;
    about_dog_tab_one: TTabSheet;
    ins_dog_inpBox: TGroupBox;
    dog_guest_fio_inp: TLabeledEdit;
    dogliveQuercB: TCheckBox;
    data_b_lbl: TStaticText;
    date_b_inp: TDateTimePicker;
    pass_n_inp: TLabeledEdit;
    pass_seria_inp: TLabeledEdit;
    about_dog_Tab_two: TTabSheet;
    about_dog_inpBox: TGroupBox;
    kem_vid_inp: TLabeledEdit;
    data_reg_lbl: TStaticText;
    Data_reg_inp: TDateTimePicker;
    mesto_r_inp: TLabeledEdit;
    perpose_inp: TLabeledEdit;
    about_dog_Tab_three: TTabSheet;
    about_d_inp_box: TGroupBox;
    date_dog_lbl: TStaticText;
    date_dog_inp: TDateTimePicker;
    pol_lbl: TStaticText;
    pol_inp: TComboBox;
    nom_lbl: TStaticText;
    momer_id_DBL: TDBLookupComboBox;
    dog_a_lbl: TStaticText;
    dogamdDBL: TDBLookupComboBox;
    sr_dog_inp: TLabeledEdit;
    sr_dog_grader: TUpDown;
    upd_dog_grd: TDBGrid;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure dogselBtnClick(Sender: TObject);
    procedure sel_dog_reg_fnd_EditKeyPress(Sender: TObject; var Key: Char);
    procedure dog_RadiofiogrupperClick(Sender: TObject);
    procedure dog_Radiodate_d_grupperClick(Sender: TObject);
    procedure dog_reset_radioClick(Sender: TObject);
    procedure ins_dogBtnClick(Sender: TObject);
    procedure pass_n_inpKeyPress(Sender: TObject; var Key: Char);
    procedure pass_seria_inpKeyPress(Sender: TObject; var Key: Char);
    procedure dogliveQuercBClick(Sender: TObject);
    procedure dogqsvBtnClick(Sender: TObject);
    procedure upd_dog_btnClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_dog: TFrm_dog;


implementation

uses Un_dm, Un_func;

{$R *.dfm}

procedure TFrm_dog.dogliveQuercBClick(Sender: TObject);
begin
case dogliveQuercB.Checked of
true:
begin
  with dm.dogQuery do
begin
  Close;
  LockType:=ltOptimistic;
  CursorType:= ctKeyset;
  CursorLocation := clUseClient;
  open;
end;
  ins_dog_Grd.ReadOnly:=false;
end;
false:
begin
with dm.dogQuery do
begin
  Close;
  LockType:=ltOptimistic;
  CursorType:= ctStatic;
  CursorLocation := clUseClient;
  Open;
end;
  ins_dog_Grd.ReadOnly:=True;
end;

end;
end;

procedure TFrm_dog.dogqsvBtnClick(Sender: TObject);
var
  UserResponse: Integer;
begin
  dm.Connection.BeginTrans;
  try
    if dm.dogQuery.State in [dsEdit, dsInsert] then
      dm.dogQuery.Post;
    UserResponse := MessageDlg('Вы уверены, что хотите сохранить изменения?', 
    mtConfirmation, [mbYes, mbNo], 0);
    if UserResponse = mrYes then
    begin
      dm.Connection.CommitTrans;
      dm.dogQuery.DisableControls;
      try
        dm.dogQuery.Close;
        dm.dogQuery.SQL.Text :=
          'select'+' '+
    'dogovor.dog_id,'+' '+
    'dogovor.guest_fio,'+' '+
    'dogovor.data_b,'+' '+
    'dogovor.pass_n,'+' '+
    'dogovor.pass_seria,'+' '+
    'dogovor.kem_vid,'+' '+
    'dogovor.mesto_r,'+' '+
    'dogovor.data_reg,'+' '+
    'dogovor.pol,'+' '+
    'dogovor.perpose,'+' '+
    'nomer.nomer_kind,'+' '+
    'dogovor.date_dog,'+' '+
    'dogovor.sr_dog,'+' '+
    'm_admin.fio_admin'+' '+
    'from dogovor'+' '+
    'inner join nomer on  dogovor.nomer_id=nomer.nomer_id'+' '+
    'inner join m_admin on dogovor.id_admin=m_admin.id_admin'+' '+
    'where 1=1';
        dm.dogQuery.Open;
      finally
        dm.dogQuery.EnableControls;
      end;
      ShowMessage('Изменения успешно сохранены.');
    end
    else
    begin
      dm.Connection.RollbackTrans;
      ShowMessage('Изменения успешно сохранены.');
    end;
  except
    on E: Exception do
    begin
      dm.Connection.RollbackTrans;
      ShowMessage('Ошибка при сохранении данных: ' + E.Message);
    end;
  end;
end;

procedure TFrm_dog.dogselBtnClick(Sender: TObject);
begin
try
    if not DM.Connection.Connected then
      raise Exception.Create('Cоединение с базой не установлено');
    with DM.sel_dog_by_fio do
    begin
      Close;
      Parameters.ParamByName('@guest_fio').Value := dog_fio_cond_edit.Text;
      Open;
       DM.dogQuery.Recordset:=dm.sel_dog_by_fio.Recordset;
    end;
  except
    on E: EDatabaseError do
      ShowMessage('Ошибка: ' + E.Message);
    on E: Exception do
      ShowMessage('Ошибка: ' + E.Message);
  end;
end;

procedure TFrm_dog.dog_Radiodate_d_grupperClick(Sender: TObject);
begin
if  dog_Radiodate_d_grupper.Checked=true then
  begin
    try
     with dm.dogQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
     'select'+' '+
    'dogovor.dog_id,'+' '+
    'dogovor.guest_fio,'+' '+
    'dogovor.data_b,'+' '+
    'dogovor.pass_n,'+' '+
    'dogovor.pass_seria,'+' '+
    'dogovor.kem_vid,'+' '+
    'dogovor.mesto_r,'+' '+
    'dogovor.data_reg,'+' '+
    'dogovor.pol,'+' '+
    'dogovor.perpose,'+' '+
    'nomer.nomer_kind,'+' '+
    'dogovor.date_dog,'+' '+
    'dogovor.sr_dog,'+' '+
    'm_admin.fio_admin'+' '+
    'from dogovor'+' '+
    'inner join nomer on  dogovor.nomer_id=nomer.nomer_id'+' '+
    'inner join m_admin on dogovor.id_admin=m_admin.id_admin'+' '+
    'where 1=1'+'  '+
    'order by dogovor.date_dog asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка :'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_dog.dog_RadiofiogrupperClick(Sender: TObject);
begin
if  dog_Radiofiogrupper.Checked=true then
  begin
    try
     with dm.dogQuery do
     begin
      close;
      sql.Clear;
      sql.Text:=
    'select'+' '+
    'dogovor.dog_id,'+' '+
    'dogovor.guest_fio,'+' '+
    'dogovor.data_b,'+' '+
    'dogovor.pass_n,'+' '+
    'dogovor.pass_seria,'+' '+
    'dogovor.kem_vid,'+' '+
    'dogovor.mesto_r,'+' '+
    'dogovor.data_reg,'+' '+
    'dogovor.pol,'+' '+
    'dogovor.perpose,'+' '+
    'nomer.nomer_kind,'+' '+
    'dogovor.date_dog,'+' '+
    'dogovor.sr_dog,'+' '+
    'm_admin.fio_admin'+' '+
    'from dogovor'+' '+
    'inner join nomer on  dogovor.nomer_id=nomer.nomer_id'+' '+
    'inner join m_admin on dogovor.id_admin=m_admin.id_admin'+' '+
    'where 1=1'+'  '+
    'order by dogovor.guest_fio asc';
      Open;
     end;
    except on E: EADOError do
    begin
      ShowMessage('Ошибка'+' '+E.Message);
    end;
    end;
  end;
end;

procedure TFrm_dog.dog_reset_radioClick(Sender: TObject);
var
  i,j,c:Integer;
begin
 if  dog_reset_radio.Checked=true then
with Frm_dog do
    for I := 0 to ComponentCount - 1 do
     begin
       if (Components[i] is TLabeledEdit)  then
        begin
          (Components[i] as TLabeledEdit).Clear;
        end;
     end;
       with Frm_dog do
    for c := 0 to ComponentCount - 1 do
     begin
       if (Components[c] is TCheckBox)  then
        begin
          (Components[c] as TCheckBox).Checked:=False;
        end;
     end;
     with dm.dogQuery do
     begin
     Close;
     sql.Clear;
       sql.Text:=
    'select'+' '+
   'dogovor.dog_id,'+' '+
    'dogovor.guest_fio,'+' '+
    'dogovor.data_b,'+' '+
    'dogovor.pass_n,'+' '+
    'dogovor.pass_seria,'+' '+
    'dogovor.kem_vid,'+' '+
    'dogovor.mesto_r,'+' '+
    'dogovor.data_reg,'+' '+
    'dogovor.pol,'+' '+
    'dogovor.perpose,'+' '+
    'nomer.nomer_kind,'+' '+
    'dogovor.date_dog,'+' '+
    'dogovor.sr_dog,'+' '+
    'm_admin.fio_admin'+' '+
    'from dogovor'+' '+
    'inner join nomer on  dogovor.nomer_id=nomer.nomer_id'+' '+
    'inner join m_admin on dogovor.id_admin=m_admin.id_admin'+' '+
    'where 1=1';
     Open;
     end;
    with Frm_dog do
    for j := 0 to ComponentCount - 1 do
    begin
      if(Components[j] is TRadioButton)  then
      begin
        (Components[j] as TRadioButton).Checked:=False;
      end;
    end;
end;

procedure TFrm_dog.FormActivate(Sender: TObject);
begin
  DM.dogQuery.Open;
  dm.nom_query.Open;
  dm.admQuery.Open;
end;

procedure TFrm_dog.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveFormState(Self);
  CloseAllQueriesOnDataModule('dm');
end;

procedure TFrm_dog.FormCreate(Sender: TObject);
begin
  Frm_dog.KeyPreview:=true;
  Frm_dog.ShowHint:=true;
  UniformizeButtonsSize(Self,  273, 25);
  UniformizeDBGrids(Self, 'Arial', 10, clBlack, clWhite);
  UniformizeComponentSizes(Self, 998, 21, clWhite, 'Arial', 10);
  LoadFormState(Self);
  sr_dog_inp.ShowHint:=True;
end;

procedure TFrm_dog.ins_dogBtnClick(Sender: TObject);
const
AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
AreFieldsEmpty:=(
(Trim(dog_guest_fio_inp.Text)='') or
(Trim(pass_n_inp.Text)='')or
(Trim(pass_seria_inp.Text)='')or
(Trim(kem_vid_inp.Text)='')or
(Trim(mesto_r_inp.Text)='')or
(Trim(perpose_inp.Text)='')or
(pol_inp.Text='')or
(momer_id_DBL.Text='')or
(dogamdDBL.Text='')or
(sr_dog_grader.Position=0)
);
AreFieldsValid:=(
ValidateComponentText(dog_guest_fio_inp,AllowedChars)  and
ValidateComponentText(kem_vid_inp,AllowedChars)and
ValidateComponentText(mesto_r_inp,AllowedChars)and
ValidateComponentText(perpose_inp, AllowedChars)
);
if AreFieldsEmpty or not AreFieldsValid then
 begin
     MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
 end;
 try
      with dm.ins_dog do
      begin
        if not Connection.Connected then
          raise Exception.Create('Соединение с базой не установлено');
           Parameters.ParamByName('@guest_fio').Value :=dog_guest_fio_inp.Text;
           Parameters.ParamByName('@data_b').Value:=date_b_inp.Date;
           Parameters.ParamByName('@pass_n').Value:=QuotedStr( pass_n_inp.Text);
           Parameters.ParamByName('@pass_seria').Value:=pass_seria_inp.Text;
           Parameters.ParamByName('@kem_vid').Value:=kem_vid_inp.Text;
           Parameters.ParamByName('@mesto_r').Value:=mesto_r_inp.Text;
           Parameters.ParamByName('@data_reg').Value:=Data_reg_inp.Date;
           Parameters.ParamByName('@pol').Value:=pol_inp.Text;
           Parameters.ParamByName('@perpose').Value:=perpose_inp.Text;
           Parameters.ParamByName('@nomer_id').Value:=
           dm.nom_query.FieldByName('nomer_id').AsString;
           Parameters.ParamByName('@date_dog').Value:=date_dog_inp.Date;
           Parameters.ParamByName('@sr_dog').Value:=StrToInt(sr_dog_inp.Text);
           Parameters.ParamByName('@id_admin').Value:=
           dm.admQuery.FieldByName('id_admin').AsString;
           ExecProc;
           dm.dogQuery.Close;
           dm.dogQuery.Open;
        MessageDlg('Изменения внесены', mtInformation, [mbOK], 0);
      end;
    except
      on E: EADOError do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
      on E: Exception do
      begin
        ShowMessage('Ошибка: ' + E.Message);
      end;
    end;
end;

procedure TFrm_dog.pass_n_inpKeyPress(Sender: TObject; var Key: Char);
begin
  if not (Key in ['0'..'9', #8,#189]) then Key := #0;
end;

procedure TFrm_dog.pass_seria_inpKeyPress(Sender: TObject; var Key: Char);
begin
  if not (Key in ['0'..'9', #8,#189]) then Key := #0;
end;

procedure TFrm_dog.sel_dog_reg_fnd_EditKeyPress(Sender: TObject; var Key: Char);
begin
  try
   dm.dogQuery.SQL.Text:=
   'select'+' '+
   'dogovor.dog_id,'+' '+
    'dogovor.guest_fio,'+' '+
    'dogovor.data_b,'+' '+
    'dogovor.pass_n,'+' '+
    'dogovor.pass_seria,'+' '+
    'dogovor.kem_vid,'+' '+
    'dogovor.mesto_r,'+' '+
    'dogovor.data_reg,'+' '+
    'dogovor.pol,'+' '+
    'dogovor.perpose,'+' '+
    'nomer.nomer_kind,'+' '+
    'dogovor.date_dog,'+' '+
    'dogovor.sr_dog,'+' '+
    'm_admin.fio_admin'+' '+
    'from dogovor'+' '+
    'inner join nomer on  dogovor.nomer_id=nomer.nomer_id'+' '+
    'inner join m_admin on dogovor.id_admin=m_admin.id_admin'+' '+
    'where 1=1'+' '+
    'and dogovor.mesto_r like'+
   QuotedStr(Concat(sel_dog_reg_fnd_edit.Text,#37));
   dm.dogQuery.close;
   dm.dogQuery.Open;
except on E: Exception do
  begin
  ShowMessage('Ошибка'+' '+E.Message);
  end;
  end;
end;

procedure TFrm_dog.upd_dog_btnClick(Sender: TObject);
const
AllowedChars: TSysCharSet = ['А'..'Я', 'а'..'я', '0'..'9', ' ', '-', '.'];
var
  AreFieldsEmpty: Boolean;
  AreFieldsValid: Boolean;
begin
AreFieldsEmpty:=(
(upd_dog_d_dbl.Text='')or 
(Trim(upd_dogl_perpose_inp.Text)='')
);
AreFieldsValid:=(
validateComponentText(upd_dogl_perpose_inp,AllowedChars)
);
if AreFieldsEmpty or not AreFieldsValid then
begin
    MessageDlg('Ошибка: одно из полей пустое или текст не прошел проверку.',
    mtError, [mbOK], 0);
    Beep;
    Exit;
end;

end;

end.
